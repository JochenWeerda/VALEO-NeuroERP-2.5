name: Procurement Domain CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'domains/procurement/**'
      - '.github/workflows/procurement-domain-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'domains/procurement/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/procurement-domain

jobs:
  test:
    name: Test Procurement Domain
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: domains/procurement

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: procurement_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: domains/procurement/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run TypeScript compilation check
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/procurement_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: domains/procurement/coverage/lcov.info
          flags: procurement-domain
          name: Procurement Domain Coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: domains/procurement

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=package.json

  ai-model-validation:
    name: AI Model Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: domains/procurement

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install AI/ML dependencies
        run: |
          pip install scikit-learn pandas numpy pytest

      - name: Validate AI models
        run: |
          python -m pytest tests/ai/ -v

      - name: Check model performance
        run: |
          python scripts/validate-models.py

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan, ai-model-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: domains/procurement
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment"
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment"
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/production/

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security-scan, ai-model-validation]
    if: always()

    steps:
      - name: Quality Gate Check
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed - blocking deployment"
            exit 1
          fi

          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed - blocking deployment"
            exit 1
          fi

          if [[ "${{ needs.ai-model-validation.result }}" != "success" ]]; then
            echo "AI model validation failed - blocking deployment"
            exit 1
          fi

          echo "All quality gates passed âœ…"

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: domains/procurement/tests/performance/procurement-domain-test.js
          flags: --out json=results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: k6-results-procurement
          path: results.json

  integration-test:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run integration tests
        run: |
          echo "Running integration tests against staging"
          # Add integration test commands here
          # Example: npm run test:integration -- --env=staging

  ai-model-update:
    name: AI Model Update
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update AI models
        run: |
          echo "Updating AI models in production"
          # Add AI model update commands here
          # Example: python scripts/update-models.py
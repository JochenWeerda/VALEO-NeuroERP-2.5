"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.weighingSessions = exports.reportTemplates = exports.auditLogs = exports.waitLogs = exports.anprRecords = exports.slots = exports.weighingTickets = exports.waitLogStatusEnum = exports.anprStatusEnum = exports.anprConfidenceEnum = exports.gateTypeEnum = exports.slotStatusEnum = exports.weighingModeEnum = exports.commodityTypeEnum = exports.weighingStatusEnum = exports.weighingTypeEnum = void 0;
const pg_core_1 = require("drizzle-orm/pg-core");
const drizzle_orm_1 = require("drizzle-orm");
exports.weighingTypeEnum = (0, drizzle_orm_1.sql) `enum('Vehicle', 'Container', 'Silo', 'Manual')`;
exports.weighingStatusEnum = (0, drizzle_orm_1.sql) `enum('Draft', 'InProgress', 'Completed', 'Cancelled', 'Error')`;
exports.commodityTypeEnum = (0, drizzle_orm_1.sql) `enum('WHEAT', 'BARLEY', 'RAPESEED', 'SOYMEAL', 'COMPOUND_FEED', 'FERTILIZER', 'OTHER')`;
exports.weighingModeEnum = (0, drizzle_orm_1.sql) `enum('Gross', 'Tare', 'Net')`;
exports.slotStatusEnum = (0, drizzle_orm_1.sql) `enum('Scheduled', 'Entered', 'Exited', 'Cancelled', 'NoShow')`;
exports.gateTypeEnum = (0, drizzle_orm_1.sql) `enum('Inbound', 'Outbound', 'Weighing', 'Inspection')`;
exports.anprConfidenceEnum = (0, drizzle_orm_1.sql) `enum('Low', 'Medium', 'High')`;
exports.anprStatusEnum = (0, drizzle_orm_1.sql) `enum('Detected', 'Processed', 'Assigned', 'Rejected', 'Error')`;
exports.waitLogStatusEnum = (0, drizzle_orm_1.sql) `enum('Waiting', 'InService', 'Completed', 'Cancelled')`;
exports.weighingTickets = (0, pg_core_1.pgTable)('weighing_tickets', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    ticketNumber: (0, pg_core_1.text)('ticket_number').notNull(),
    type: (0, pg_core_1.text)('type', { enum: ['Vehicle', 'Container', 'Silo', 'Manual'] }).notNull(),
    status: (0, pg_core_1.text)('status', { enum: ['Draft', 'InProgress', 'Completed', 'Cancelled', 'Error'] }).notNull().default('Draft'),
    licensePlate: (0, pg_core_1.text)('license_plate'),
    containerNumber: (0, pg_core_1.text)('container_number'),
    siloId: (0, pg_core_1.text)('silo_id'),
    commodity: (0, pg_core_1.text)('commodity', { enum: ['WHEAT', 'BARLEY', 'RAPESEED', 'SOYMEAL', 'COMPOUND_FEED', 'FERTILIZER', 'OTHER'] }).notNull(),
    commodityDescription: (0, pg_core_1.text)('commodity_description'),
    grossWeight: (0, pg_core_1.jsonb)('gross_weight'),
    tareWeight: (0, pg_core_1.jsonb)('tare_weight'),
    netWeight: (0, pg_core_1.decimal)('net_weight', { precision: 10, scale: 2 }),
    netWeightUnit: (0, pg_core_1.text)('net_weight_unit', { enum: ['kg', 't'] }),
    expectedWeight: (0, pg_core_1.decimal)('expected_weight', { precision: 10, scale: 2 }),
    tolerancePercent: (0, pg_core_1.decimal)('tolerance_percent', { precision: 5, scale: 2 }).notNull().default('2.00'),
    isWithinTolerance: (0, pg_core_1.boolean)('is_within_tolerance'),
    contractId: (0, pg_core_1.uuid)('contract_id'),
    orderId: (0, pg_core_1.uuid)('order_id'),
    deliveryNoteId: (0, pg_core_1.uuid)('delivery_note_id'),
    anprRecordId: (0, pg_core_1.uuid)('anpr_record_id'),
    autoAssigned: (0, pg_core_1.boolean)('auto_assigned').notNull().default(false),
    gateId: (0, pg_core_1.text)('gate_id'),
    slotId: (0, pg_core_1.uuid)('slot_id'),
    createdAt: (0, pg_core_1.timestamp)('created_at').notNull().defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').notNull().defaultNow(),
    completedAt: (0, pg_core_1.timestamp)('completed_at'),
    version: (0, pg_core_1.integer)('version').notNull().default(1),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('weighing_tickets_tenant_idx').on(table.tenantId),
    statusIdx: (0, pg_core_1.index)('weighing_tickets_status_idx').on(table.status),
    ticketNumberIdx: (0, pg_core_1.index)('weighing_tickets_number_idx').on(table.ticketNumber),
    licensePlateIdx: (0, pg_core_1.index)('weighing_tickets_license_plate_idx').on(table.licensePlate),
    contractIdx: (0, pg_core_1.index)('weighing_tickets_contract_idx').on(table.contractId),
    orderIdx: (0, pg_core_1.index)('weighing_tickets_order_idx').on(table.orderId),
    gateIdx: (0, pg_core_1.index)('weighing_tickets_gate_idx').on(table.gateId),
    createdAtIdx: (0, pg_core_1.index)('weighing_tickets_created_at_idx').on(table.createdAt),
}));
exports.slots = (0, pg_core_1.pgTable)('slots', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    gateId: (0, pg_core_1.text)('gate_id').notNull(),
    gateType: (0, pg_core_1.text)('gate_type', { enum: ['Inbound', 'Outbound', 'Weighing', 'Inspection'] }).notNull(),
    windowFrom: (0, pg_core_1.timestamp)('window_from').notNull(),
    windowTo: (0, pg_core_1.timestamp)('window_to').notNull(),
    assignedVehicleId: (0, pg_core_1.uuid)('assigned_vehicle_id'),
    licensePlate: (0, pg_core_1.text)('license_plate'),
    priority: (0, pg_core_1.integer)('priority').notNull().default(5),
    status: (0, pg_core_1.text)('status', { enum: ['Scheduled', 'Entered', 'Exited', 'Cancelled', 'NoShow'] }).notNull().default('Scheduled'),
    contractId: (0, pg_core_1.uuid)('contract_id'),
    orderId: (0, pg_core_1.uuid)('order_id'),
    commodity: (0, pg_core_1.text)('commodity'),
    expectedWeight: (0, pg_core_1.decimal)('expected_weight', { precision: 10, scale: 2 }),
    enteredAt: (0, pg_core_1.timestamp)('entered_at'),
    exitedAt: (0, pg_core_1.timestamp)('exited_at'),
    actualServiceStart: (0, pg_core_1.timestamp)('actual_service_start'),
    notes: (0, pg_core_1.text)('notes'),
    createdAt: (0, pg_core_1.timestamp)('created_at').notNull().defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').notNull().defaultNow(),
    version: (0, pg_core_1.integer)('version').notNull().default(1),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('slots_tenant_idx').on(table.tenantId),
    gateIdx: (0, pg_core_1.index)('slots_gate_idx').on(table.gateId),
    statusIdx: (0, pg_core_1.index)('slots_status_idx').on(table.status),
    windowFromIdx: (0, pg_core_1.index)('slots_window_from_idx').on(table.windowFrom),
    assignedVehicleIdx: (0, pg_core_1.index)('slots_assigned_vehicle_idx').on(table.assignedVehicleId),
    licensePlateIdx: (0, pg_core_1.index)('slots_license_plate_idx').on(table.licensePlate),
}));
exports.anprRecords = (0, pg_core_1.pgTable)('anpr_records', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    licensePlate: (0, pg_core_1.text)('license_plate').notNull(),
    confidence: (0, pg_core_1.decimal)('confidence', { precision: 5, scale: 2 }).notNull(),
    confidenceLevel: (0, pg_core_1.text)('confidence_level', { enum: ['Low', 'Medium', 'High'] }).notNull(),
    capturedAt: (0, pg_core_1.timestamp)('captured_at').notNull(),
    imageUri: (0, pg_core_1.text)('image_uri'),
    cameraId: (0, pg_core_1.text)('camera_id').notNull(),
    gateId: (0, pg_core_1.text)('gate_id'),
    status: (0, pg_core_1.text)('status', { enum: ['Detected', 'Processed', 'Assigned', 'Rejected', 'Error'] }).notNull().default('Detected'),
    processedAt: (0, pg_core_1.timestamp)('processed_at'),
    ticketSuggestionId: (0, pg_core_1.uuid)('ticket_suggestion_id'),
    assignedTicketId: (0, pg_core_1.uuid)('assigned_ticket_id'),
    vehicleId: (0, pg_core_1.uuid)('vehicle_id'),
    contractId: (0, pg_core_1.uuid)('contract_id'),
    orderId: (0, pg_core_1.uuid)('order_id'),
    commodity: (0, pg_core_1.text)('commodity'),
    errorMessage: (0, pg_core_1.text)('error_message'),
    retryCount: (0, pg_core_1.integer)('retry_count').notNull().default(0),
    createdAt: (0, pg_core_1.timestamp)('created_at').notNull().defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').notNull().defaultNow(),
    version: (0, pg_core_1.integer)('version').notNull().default(1),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('anpr_records_tenant_idx').on(table.tenantId),
    licensePlateIdx: (0, pg_core_1.index)('anpr_records_license_plate_idx').on(table.licensePlate),
    statusIdx: (0, pg_core_1.index)('anpr_records_status_idx').on(table.status),
    capturedAtIdx: (0, pg_core_1.index)('anpr_records_captured_at_idx').on(table.capturedAt),
    cameraIdx: (0, pg_core_1.index)('anpr_records_camera_idx').on(table.cameraId),
    gateIdx: (0, pg_core_1.index)('anpr_records_gate_idx').on(table.gateId),
    assignedTicketIdx: (0, pg_core_1.index)('anpr_records_assigned_ticket_idx').on(table.assignedTicketId),
}));
exports.waitLogs = (0, pg_core_1.pgTable)('wait_logs', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    ticketId: (0, pg_core_1.uuid)('ticket_id').notNull(),
    licensePlate: (0, pg_core_1.text)('license_plate'),
    arrivalAt: (0, pg_core_1.timestamp)('arrival_at').notNull(),
    serviceStartAt: (0, pg_core_1.timestamp)('service_start_at'),
    serviceEndAt: (0, pg_core_1.timestamp)('service_end_at'),
    waitTimeMinutes: (0, pg_core_1.integer)('wait_time_minutes'),
    serviceTimeMinutes: (0, pg_core_1.integer)('service_time_minutes'),
    totalTimeMinutes: (0, pg_core_1.integer)('total_time_minutes'),
    gateId: (0, pg_core_1.text)('gate_id').notNull(),
    gateType: (0, pg_core_1.text)('gate_type', { enum: ['Inbound', 'Outbound', 'Weighing', 'Inspection'] }).notNull(),
    slotId: (0, pg_core_1.uuid)('slot_id'),
    priority: (0, pg_core_1.integer)('priority').notNull().default(5),
    isHighPriority: (0, pg_core_1.boolean)('is_high_priority'),
    isOvertime: (0, pg_core_1.boolean)('is_overtime'),
    contractId: (0, pg_core_1.uuid)('contract_id'),
    orderId: (0, pg_core_1.uuid)('order_id'),
    commodity: (0, pg_core_1.text)('commodity'),
    expectedWeight: (0, pg_core_1.decimal)('expected_weight', { precision: 10, scale: 2 }),
    status: (0, pg_core_1.text)('status', { enum: ['Waiting', 'InService', 'Completed', 'Cancelled'] }).notNull().default('Waiting'),
    notes: (0, pg_core_1.text)('notes'),
    createdAt: (0, pg_core_1.timestamp)('created_at').notNull().defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').notNull().defaultNow(),
    version: (0, pg_core_1.integer)('version').notNull().default(1),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('wait_logs_tenant_idx').on(table.tenantId),
    ticketIdx: (0, pg_core_1.index)('wait_logs_ticket_idx').on(table.ticketId),
    gateIdx: (0, pg_core_1.index)('wait_logs_gate_idx').on(table.gateId),
    statusIdx: (0, pg_core_1.index)('wait_logs_status_idx').on(table.status),
    arrivalAtIdx: (0, pg_core_1.index)('wait_logs_arrival_at_idx').on(table.arrivalAt),
    licensePlateIdx: (0, pg_core_1.index)('wait_logs_license_plate_idx').on(table.licensePlate),
    slotIdx: (0, pg_core_1.index)('wait_logs_slot_idx').on(table.slotId),
}));
exports.auditLogs = (0, pg_core_1.pgTable)('audit_logs', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    entityType: (0, pg_core_1.text)('entity_type').notNull(),
    entityId: (0, pg_core_1.uuid)('entity_id').notNull(),
    action: (0, pg_core_1.text)('action').notNull(),
    userId: (0, pg_core_1.uuid)('user_id'),
    userRole: (0, pg_core_1.text)('user_role'),
    ipAddress: (0, pg_core_1.text)('ip_address'),
    userAgent: (0, pg_core_1.text)('user_agent'),
    oldValues: (0, pg_core_1.jsonb)('old_values'),
    newValues: (0, pg_core_1.jsonb)('new_values'),
    changes: (0, pg_core_1.jsonb)('changes'),
    sessionId: (0, pg_core_1.uuid)('session_id'),
    requestId: (0, pg_core_1.text)('request_id'),
    gateId: (0, pg_core_1.text)('gate_id'),
    scaleId: (0, pg_core_1.text)('scale_id'),
    timestamp: (0, pg_core_1.timestamp)('timestamp').notNull().defaultNow(),
    notes: (0, pg_core_1.text)('notes'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('audit_logs_tenant_idx').on(table.tenantId),
    entityIdx: (0, pg_core_1.index)('audit_logs_entity_idx').on(table.entityType, table.entityId),
    actionIdx: (0, pg_core_1.index)('audit_logs_action_idx').on(table.action),
    timestampIdx: (0, pg_core_1.index)('audit_logs_timestamp_idx').on(table.timestamp),
    userIdx: (0, pg_core_1.index)('audit_logs_user_idx').on(table.userId),
}));
exports.reportTemplates = (0, pg_core_1.pgTable)('report_templates', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    type: (0, pg_core_1.text)('type').notNull(),
    category: (0, pg_core_1.text)('category').notNull(),
    config: (0, pg_core_1.jsonb)('config').notNull(),
    parameters: (0, pg_core_1.jsonb)('parameters'),
    schedule: (0, pg_core_1.jsonb)('schedule'),
    format: (0, pg_core_1.text)('format', { enum: ['CSV', 'Excel', 'JSON', 'PDF'] }).notNull().default('CSV'),
    recipients: (0, pg_core_1.jsonb)('recipients'),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdBy: (0, pg_core_1.uuid)('created_by').notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at').notNull().defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').notNull().defaultNow(),
    lastRunAt: (0, pg_core_1.timestamp)('last_run_at'),
    version: (0, pg_core_1.integer)('version').notNull().default(1),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('report_templates_tenant_idx').on(table.tenantId),
    typeIdx: (0, pg_core_1.index)('report_templates_type_idx').on(table.type),
    categoryIdx: (0, pg_core_1.index)('report_templates_category_idx').on(table.category),
    activeIdx: (0, pg_core_1.index)('report_templates_active_idx').on(table.isActive),
}));
exports.weighingSessions = (0, pg_core_1.pgTable)('weighing_sessions', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.uuid)('tenant_id').notNull(),
    sessionNumber: (0, pg_core_1.text)('session_number').notNull(),
    gateId: (0, pg_core_1.text)('gate_id').notNull(),
    scaleId: (0, pg_core_1.text)('scale_id').notNull(),
    operatorId: (0, pg_core_1.uuid)('operator_id'),
    startedAt: (0, pg_core_1.timestamp)('started_at').notNull(),
    endedAt: (0, pg_core_1.timestamp)('ended_at'),
    totalTickets: (0, pg_core_1.integer)('total_tickets').notNull().default(0),
    totalWeight: (0, pg_core_1.decimal)('total_weight', { precision: 12, scale: 2 }),
    totalWeightUnit: (0, pg_core_1.text)('total_weight_unit', { enum: ['kg', 't'] }),
    status: (0, pg_core_1.text)('status', { enum: ['Active', 'Completed', 'Error'] }).notNull().default('Active'),
    notes: (0, pg_core_1.text)('notes'),
    createdAt: (0, pg_core_1.timestamp)('created_at').notNull().defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').notNull().defaultNow(),
    version: (0, pg_core_1.integer)('version').notNull().default(1),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('weighing_sessions_tenant_idx').on(table.tenantId),
    gateIdx: (0, pg_core_1.index)('weighing_sessions_gate_idx').on(table.gateId),
    scaleIdx: (0, pg_core_1.index)('weighing_sessions_scale_idx').on(table.scaleId),
    statusIdx: (0, pg_core_1.index)('weighing_sessions_status_idx').on(table.status),
    startedAtIdx: (0, pg_core_1.index)('weighing_sessions_started_at_idx').on(table.startedAt),
}));
//# sourceMappingURL=schema.js.map
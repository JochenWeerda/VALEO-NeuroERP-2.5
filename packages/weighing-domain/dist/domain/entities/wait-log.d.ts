import { z } from 'zod';
export declare const WaitLogSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    tenantId: z.ZodString;
    ticketId: z.ZodString;
    licensePlate: z.ZodOptional<z.ZodString>;
    arrivalAt: z.ZodString;
    serviceStartAt: z.ZodOptional<z.ZodString>;
    serviceEndAt: z.ZodOptional<z.ZodString>;
    waitTimeMinutes: z.ZodOptional<z.ZodNumber>;
    serviceTimeMinutes: z.ZodOptional<z.ZodNumber>;
    totalTimeMinutes: z.ZodOptional<z.ZodNumber>;
    gateId: z.ZodString;
    gateType: z.ZodEnum<["Inbound", "Outbound", "Weighing", "Inspection"]>;
    slotId: z.ZodOptional<z.ZodString>;
    priority: z.ZodDefault<z.ZodNumber>;
    isHighPriority: z.ZodOptional<z.ZodBoolean>;
    isOvertime: z.ZodOptional<z.ZodBoolean>;
    contractId: z.ZodOptional<z.ZodString>;
    orderId: z.ZodOptional<z.ZodString>;
    commodity: z.ZodOptional<z.ZodString>;
    expectedWeight: z.ZodOptional<z.ZodNumber>;
    status: z.ZodDefault<z.ZodEnum<["Waiting", "InService", "Completed", "Cancelled"]>>;
    notes: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodDate>;
    updatedAt: z.ZodOptional<z.ZodDate>;
    version: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    tenantId: string;
    status: "Completed" | "Cancelled" | "Waiting" | "InService";
    gateId: string;
    version: number;
    gateType: "Inbound" | "Outbound" | "Weighing" | "Inspection";
    priority: number;
    ticketId: string;
    arrivalAt: string;
    id?: string | undefined;
    licensePlate?: string | undefined;
    commodity?: string | undefined;
    expectedWeight?: number | undefined;
    contractId?: string | undefined;
    orderId?: string | undefined;
    slotId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    notes?: string | undefined;
    serviceStartAt?: string | undefined;
    serviceEndAt?: string | undefined;
    waitTimeMinutes?: number | undefined;
    serviceTimeMinutes?: number | undefined;
    totalTimeMinutes?: number | undefined;
    isHighPriority?: boolean | undefined;
    isOvertime?: boolean | undefined;
}, {
    tenantId: string;
    gateId: string;
    gateType: "Inbound" | "Outbound" | "Weighing" | "Inspection";
    ticketId: string;
    arrivalAt: string;
    id?: string | undefined;
    status?: "Completed" | "Cancelled" | "Waiting" | "InService" | undefined;
    licensePlate?: string | undefined;
    commodity?: string | undefined;
    expectedWeight?: number | undefined;
    contractId?: string | undefined;
    orderId?: string | undefined;
    slotId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    version?: number | undefined;
    priority?: number | undefined;
    notes?: string | undefined;
    serviceStartAt?: string | undefined;
    serviceEndAt?: string | undefined;
    waitTimeMinutes?: number | undefined;
    serviceTimeMinutes?: number | undefined;
    totalTimeMinutes?: number | undefined;
    isHighPriority?: boolean | undefined;
    isOvertime?: boolean | undefined;
}>;
export interface WaitLogEntity {
    id: string;
    tenantId: string;
    ticketId: string;
    licensePlate?: string;
    arrivalAt: Date;
    serviceStartAt?: Date;
    serviceEndAt?: Date;
    waitTimeMinutes?: number;
    serviceTimeMinutes?: number;
    totalTimeMinutes?: number;
    gateId: string;
    gateType: 'Inbound' | 'Outbound' | 'Weighing' | 'Inspection';
    slotId?: string;
    priority: number;
    isHighPriority?: boolean;
    isOvertime?: boolean;
    contractId?: string;
    orderId?: string;
    commodity?: string;
    expectedWeight?: number;
    status: 'Waiting' | 'InService' | 'Completed' | 'Cancelled';
    notes?: string;
    createdAt: Date;
    updatedAt: Date;
    version: number;
}
export declare class WaitLog implements WaitLogEntity {
    id: string;
    tenantId: string;
    ticketId: string;
    licensePlate?: string;
    arrivalAt: Date;
    serviceStartAt?: Date;
    serviceEndAt?: Date;
    waitTimeMinutes?: number;
    serviceTimeMinutes?: number;
    totalTimeMinutes?: number;
    gateId: string;
    gateType: 'Inbound' | 'Outbound' | 'Weighing' | 'Inspection';
    slotId?: string;
    priority: number;
    isHighPriority?: boolean;
    isOvertime?: boolean;
    contractId?: string;
    orderId?: string;
    commodity?: string;
    expectedWeight?: number;
    status: 'Waiting' | 'InService' | 'Completed' | 'Cancelled';
    notes?: string;
    createdAt: Date;
    updatedAt: Date;
    version: number;
    constructor(props: WaitLogEntity);
    startService(): void;
    completeService(): void;
    cancel(reason?: string): void;
    private calculateTimes;
    isWaiting(): boolean;
    isInService(): boolean;
    isCompleted(): boolean;
    isActive(): boolean;
    getCurrentWaitTimeMinutes(): number;
    getAgeMinutes(): number;
    isLongWait(thresholdMinutes?: number): boolean;
    isHighPriorityCheck(): boolean;
    isLowPriority(): boolean;
    getServiceEfficiency(): number | null;
    toReportRow(): {
        ticketId: string;
        licensePlate?: string;
        gateId: string;
        gateType: string;
        priority: number;
        arrivalAt: string;
        serviceStartAt?: string;
        serviceEndAt?: string;
        waitTimeMinutes?: number;
        serviceTimeMinutes?: number;
        totalTimeMinutes?: number;
        status: string;
        commodity?: string;
        isOvertime?: boolean;
    };
}
//# sourceMappingURL=wait-log.d.ts.map
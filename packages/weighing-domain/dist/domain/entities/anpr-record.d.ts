import { z } from 'zod';
export declare const ANPRConfidence: {
    readonly LOW: "Low";
    readonly MEDIUM: "Medium";
    readonly HIGH: "High";
};
export declare const ANPRStatus: {
    readonly DETECTED: "Detected";
    readonly PROCESSED: "Processed";
    readonly ASSIGNED: "Assigned";
    readonly REJECTED: "Rejected";
    readonly ERROR: "Error";
};
export type ANPRConfidenceValue = typeof ANPRConfidence[keyof typeof ANPRConfidence];
export type ANPRStatusValue = typeof ANPRStatus[keyof typeof ANPRStatus];
export declare const ANPRRecordSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    tenantId: z.ZodString;
    licensePlate: z.ZodString;
    confidence: z.ZodNumber;
    confidenceLevel: z.ZodEnum<["Low", "Medium", "High"]>;
    capturedAt: z.ZodString;
    imageUri: z.ZodOptional<z.ZodString>;
    cameraId: z.ZodString;
    gateId: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["Detected", "Processed", "Assigned", "Rejected", "Error"]>>;
    processedAt: z.ZodOptional<z.ZodString>;
    ticketSuggestionId: z.ZodOptional<z.ZodString>;
    assignedTicketId: z.ZodOptional<z.ZodString>;
    vehicleId: z.ZodOptional<z.ZodString>;
    contractId: z.ZodOptional<z.ZodString>;
    orderId: z.ZodOptional<z.ZodString>;
    commodity: z.ZodOptional<z.ZodString>;
    errorMessage: z.ZodOptional<z.ZodString>;
    retryCount: z.ZodDefault<z.ZodNumber>;
    createdAt: z.ZodOptional<z.ZodDate>;
    updatedAt: z.ZodOptional<z.ZodDate>;
    version: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    tenantId: string;
    status: "Error" | "Detected" | "Processed" | "Assigned" | "Rejected";
    licensePlate: string;
    version: number;
    confidence: number;
    confidenceLevel: "Low" | "Medium" | "High";
    capturedAt: string;
    cameraId: string;
    retryCount: number;
    id?: string | undefined;
    commodity?: string | undefined;
    contractId?: string | undefined;
    orderId?: string | undefined;
    gateId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    imageUri?: string | undefined;
    processedAt?: string | undefined;
    ticketSuggestionId?: string | undefined;
    assignedTicketId?: string | undefined;
    vehicleId?: string | undefined;
    errorMessage?: string | undefined;
}, {
    tenantId: string;
    licensePlate: string;
    confidence: number;
    confidenceLevel: "Low" | "Medium" | "High";
    capturedAt: string;
    cameraId: string;
    id?: string | undefined;
    status?: "Error" | "Detected" | "Processed" | "Assigned" | "Rejected" | undefined;
    commodity?: string | undefined;
    contractId?: string | undefined;
    orderId?: string | undefined;
    gateId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    version?: number | undefined;
    imageUri?: string | undefined;
    processedAt?: string | undefined;
    ticketSuggestionId?: string | undefined;
    assignedTicketId?: string | undefined;
    vehicleId?: string | undefined;
    errorMessage?: string | undefined;
    retryCount?: number | undefined;
}>;
export interface ANPRRecordEntity {
    id: string;
    tenantId: string;
    licensePlate: string;
    confidence: number;
    confidenceLevel: ANPRConfidenceValue;
    capturedAt: Date;
    imageUri?: string;
    cameraId: string;
    gateId?: string;
    status: ANPRStatusValue;
    processedAt?: Date;
    ticketSuggestionId?: string;
    assignedTicketId?: string;
    vehicleId?: string;
    contractId?: string;
    orderId?: string;
    commodity?: string;
    errorMessage?: string;
    retryCount: number;
    createdAt: Date;
    updatedAt: Date;
    version: number;
}
export declare class ANPRRecord implements ANPRRecordEntity {
    id: string;
    tenantId: string;
    licensePlate: string;
    confidence: number;
    confidenceLevel: ANPRConfidenceValue;
    capturedAt: Date;
    imageUri?: string;
    cameraId: string;
    gateId?: string;
    status: ANPRStatusValue;
    processedAt?: Date;
    ticketSuggestionId?: string;
    assignedTicketId?: string;
    vehicleId?: string;
    contractId?: string;
    orderId?: string;
    commodity?: string;
    errorMessage?: string;
    retryCount: number;
    createdAt: Date;
    updatedAt: Date;
    version: number;
    constructor(props: ANPRRecordEntity);
    process(vehicleData?: {
        vehicleId?: string;
        contractId?: string;
        orderId?: string;
        commodity?: string;
    }): void;
    assignTicket(ticketId: string): void;
    reject(reason?: string): void;
    markError(errorMessage: string): void;
    retry(): void;
    isProcessed(): boolean;
    isAssigned(): boolean;
    isHighConfidence(): boolean;
    isMediumConfidence(): boolean;
    isLowConfidence(): boolean;
    canBeRetried(): boolean;
    getConfidencePercentage(): number;
    getConfidenceLevel(): ANPRConfidenceValue;
    getAgeMinutes(): number;
    isStale(maxAgeMinutes?: number): boolean;
    getProcessingTimeSeconds(): number | null;
}
//# sourceMappingURL=anpr-record.d.ts.map
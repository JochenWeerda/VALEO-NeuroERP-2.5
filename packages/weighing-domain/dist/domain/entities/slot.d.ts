import { z } from 'zod';
export declare const SlotStatus: {
    readonly SCHEDULED: "Scheduled";
    readonly ENTERED: "Entered";
    readonly EXITED: "Exited";
    readonly CANCELLED: "Cancelled";
    readonly NO_SHOW: "NoShow";
};
export declare const GateType: {
    readonly INBOUND: "Inbound";
    readonly OUTBOUND: "Outbound";
    readonly WEIGHING: "Weighing";
    readonly INSPECTION: "Inspection";
};
export type SlotStatusValue = typeof SlotStatus[keyof typeof SlotStatus];
export type GateTypeValue = typeof GateType[keyof typeof GateType];
export declare const SlotSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    tenantId: z.ZodString;
    gateId: z.ZodString;
    gateType: z.ZodEnum<["Inbound", "Outbound", "Weighing", "Inspection"]>;
    windowFrom: z.ZodString;
    windowTo: z.ZodString;
    assignedVehicleId: z.ZodOptional<z.ZodString>;
    licensePlate: z.ZodOptional<z.ZodString>;
    priority: z.ZodDefault<z.ZodNumber>;
    status: z.ZodDefault<z.ZodEnum<["Scheduled", "Entered", "Exited", "Cancelled", "NoShow"]>>;
    contractId: z.ZodOptional<z.ZodString>;
    orderId: z.ZodOptional<z.ZodString>;
    commodity: z.ZodOptional<z.ZodString>;
    expectedWeight: z.ZodOptional<z.ZodNumber>;
    enteredAt: z.ZodOptional<z.ZodString>;
    exitedAt: z.ZodOptional<z.ZodString>;
    actualServiceStart: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodDate>;
    updatedAt: z.ZodOptional<z.ZodDate>;
    version: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    tenantId: string;
    status: "Cancelled" | "Scheduled" | "Entered" | "Exited" | "NoShow";
    gateId: string;
    version: number;
    gateType: "Inbound" | "Outbound" | "Weighing" | "Inspection";
    windowFrom: string;
    windowTo: string;
    priority: number;
    id?: string | undefined;
    licensePlate?: string | undefined;
    commodity?: string | undefined;
    expectedWeight?: number | undefined;
    contractId?: string | undefined;
    orderId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    assignedVehicleId?: string | undefined;
    enteredAt?: string | undefined;
    exitedAt?: string | undefined;
    actualServiceStart?: string | undefined;
    notes?: string | undefined;
}, {
    tenantId: string;
    gateId: string;
    gateType: "Inbound" | "Outbound" | "Weighing" | "Inspection";
    windowFrom: string;
    windowTo: string;
    id?: string | undefined;
    status?: "Cancelled" | "Scheduled" | "Entered" | "Exited" | "NoShow" | undefined;
    licensePlate?: string | undefined;
    commodity?: string | undefined;
    expectedWeight?: number | undefined;
    contractId?: string | undefined;
    orderId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    version?: number | undefined;
    assignedVehicleId?: string | undefined;
    priority?: number | undefined;
    enteredAt?: string | undefined;
    exitedAt?: string | undefined;
    actualServiceStart?: string | undefined;
    notes?: string | undefined;
}>;
export interface SlotEntity {
    id: string;
    tenantId: string;
    gateId: string;
    gateType: GateTypeValue;
    windowFrom: Date;
    windowTo: Date;
    assignedVehicleId?: string;
    licensePlate?: string;
    priority: number;
    status: SlotStatusValue;
    contractId?: string;
    orderId?: string;
    commodity?: string;
    expectedWeight?: number;
    enteredAt?: Date;
    exitedAt?: Date;
    actualServiceStart?: Date;
    notes?: string;
    createdAt: Date;
    updatedAt: Date;
    version: number;
}
export declare class Slot implements SlotEntity {
    id: string;
    tenantId: string;
    gateId: string;
    gateType: GateTypeValue;
    windowFrom: Date;
    windowTo: Date;
    assignedVehicleId?: string;
    licensePlate?: string;
    priority: number;
    status: SlotStatusValue;
    contractId?: string;
    orderId?: string;
    commodity?: string;
    expectedWeight?: number;
    enteredAt?: Date;
    exitedAt?: Date;
    actualServiceStart?: Date;
    notes?: string;
    createdAt: Date;
    updatedAt: Date;
    version: number;
    constructor(props: SlotEntity);
    assignVehicle(vehicleId: string, licensePlate?: string): void;
    markEntered(): void;
    markExited(): void;
    cancel(reason?: string): void;
    markNoShow(): void;
    isActive(): boolean;
    isCompleted(): boolean;
    isOverdue(): boolean;
    getWaitTimeMinutes(): number | null;
    getServiceTimeMinutes(): number | null;
    getTotalTimeMinutes(): number | null;
    isHighPriority(): boolean;
    isLowPriority(): boolean;
    isWithinWindow(now?: Date): boolean;
    getWindowDurationMinutes(): number;
}
//# sourceMappingURL=slot.d.ts.map
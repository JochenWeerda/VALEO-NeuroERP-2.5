"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.priceQuotes = exports.taxChargeRefs = exports.dynamicFormulas = exports.conditionSets = exports.priceLists = void 0;
const pg_core_1 = require("drizzle-orm/pg-core");
exports.priceLists = (0, pg_core_1.pgTable)('price_lists', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    code: (0, pg_core_1.text)('code'),
    currency: (0, pg_core_1.text)('currency').default('EUR').notNull(),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }).notNull(),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    lines: (0, pg_core_1.jsonb)('lines').notNull(),
    status: (0, pg_core_1.text)('status').default('Draft').notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    createdBy: (0, pg_core_1.text)('created_by'),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
    updatedBy: (0, pg_core_1.text)('updated_by'),
    activatedAt: (0, pg_core_1.timestamp)('activated_at', { withTimezone: true }),
    activatedBy: (0, pg_core_1.text)('activated_by'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('pl_tenant_idx').on(table.tenantId),
    statusIdx: (0, pg_core_1.index)('pl_status_idx').on(table.status),
    validFromIdx: (0, pg_core_1.index)('pl_valid_from_idx').on(table.validFrom),
}));
exports.conditionSets = (0, pg_core_1.pgTable)('condition_sets', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    key: (0, pg_core_1.text)('key').notNull(),
    keyType: (0, pg_core_1.text)('key_type').notNull(),
    rules: (0, pg_core_1.jsonb)('rules').notNull(),
    priority: (0, pg_core_1.integer)('priority').default(100).notNull(),
    conflictStrategy: (0, pg_core_1.text)('conflict_strategy').default('Stack').notNull(),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }).notNull(),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    active: (0, pg_core_1.boolean)('active').default(true).notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    createdBy: (0, pg_core_1.text)('created_by'),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
    updatedBy: (0, pg_core_1.text)('updated_by'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('cs_tenant_idx').on(table.tenantId),
    keyIdx: (0, pg_core_1.index)('cs_key_idx').on(table.key),
    activeIdx: (0, pg_core_1.index)('cs_active_idx').on(table.active),
}));
exports.dynamicFormulas = (0, pg_core_1.pgTable)('dynamic_formulas', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    expression: (0, pg_core_1.text)('expression').notNull(),
    inputs: (0, pg_core_1.jsonb)('inputs').notNull(),
    rounding: (0, pg_core_1.jsonb)('rounding'),
    caps: (0, pg_core_1.jsonb)('caps'),
    sku: (0, pg_core_1.text)('sku'),
    commodity: (0, pg_core_1.text)('commodity'),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }).notNull(),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    active: (0, pg_core_1.boolean)('active').default(true).notNull(),
    testInputs: (0, pg_core_1.jsonb)('test_inputs'),
    expectedResult: (0, pg_core_1.numeric)('expected_result', { precision: 15, scale: 4 }),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    createdBy: (0, pg_core_1.text)('created_by'),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
    updatedBy: (0, pg_core_1.text)('updated_by'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('df_tenant_idx').on(table.tenantId),
    skuIdx: (0, pg_core_1.index)('df_sku_idx').on(table.sku),
    commodityIdx: (0, pg_core_1.index)('df_commodity_idx').on(table.commodity),
    activeIdx: (0, pg_core_1.index)('df_active_idx').on(table.active),
}));
exports.taxChargeRefs = (0, pg_core_1.pgTable)('tax_charge_refs', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    code: (0, pg_core_1.text)('code').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    type: (0, pg_core_1.text)('type').notNull(),
    method: (0, pg_core_1.text)('method').notNull(),
    rateOrAmount: (0, pg_core_1.numeric)('rate_or_amount', { precision: 10, scale: 4 }).notNull(),
    scope: (0, pg_core_1.text)('scope').notNull(),
    scopeValue: (0, pg_core_1.text)('scope_value'),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }).notNull(),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    country: (0, pg_core_1.text)('country').default('DE').notNull(),
    region: (0, pg_core_1.text)('region'),
    active: (0, pg_core_1.boolean)('active').default(true).notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    createdBy: (0, pg_core_1.text)('created_by'),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
    updatedBy: (0, pg_core_1.text)('updated_by'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('tc_tenant_idx').on(table.tenantId),
    codeIdx: (0, pg_core_1.index)('tc_code_idx').on(table.code),
    typeIdx: (0, pg_core_1.index)('tc_type_idx').on(table.type),
    activeIdx: (0, pg_core_1.index)('tc_active_idx').on(table.active),
}));
exports.priceQuotes = (0, pg_core_1.pgTable)('price_quotes', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    inputs: (0, pg_core_1.jsonb)('inputs').notNull(),
    components: (0, pg_core_1.jsonb)('components').notNull(),
    totalNet: (0, pg_core_1.numeric)('total_net', { precision: 15, scale: 2 }).notNull(),
    totalGross: (0, pg_core_1.numeric)('total_gross', { precision: 15, scale: 2 }),
    currency: (0, pg_core_1.text)('currency').default('EUR').notNull(),
    calculatedAt: (0, pg_core_1.timestamp)('calculated_at', { withTimezone: true }).defaultNow().notNull(),
    expiresAt: (0, pg_core_1.timestamp)('expires_at', { withTimezone: true }).notNull(),
    signature: (0, pg_core_1.text)('signature'),
    createdBy: (0, pg_core_1.text)('created_by'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('pq_tenant_idx').on(table.tenantId),
    expiresAtIdx: (0, pg_core_1.index)('pq_expires_at_idx').on(table.expiresAt),
}));
//# sourceMappingURL=schema.js.map
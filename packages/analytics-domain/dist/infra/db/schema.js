"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mvWeighingVolumes = exports.mvFinanceKpis = exports.mvRegulatoryStats = exports.mvQualityStats = exports.mvInventoryBalances = exports.mvContractPositions = exports.factFinance = exports.factRegulatory = exports.factQuality = exports.factWeighing = exports.factProduction = exports.factContracts = exports.forecasts = exports.reports = exports.kpis = void 0;
const pg_core_1 = require("drizzle-orm/pg-core");
const baseColumns = {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow().notNull(),
    version: (0, pg_core_1.integer)('version').default(1).notNull(),
};
exports.kpis = (0, pg_core_1.pgTable)('kpis', {
    ...baseColumns,
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    value: (0, pg_core_1.text)('value').notNull(),
    unit: (0, pg_core_1.text)('unit').notNull(),
    context: (0, pg_core_1.jsonb)('context'),
    calculatedAt: (0, pg_core_1.timestamp)('calculated_at').defaultNow().notNull(),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantNameIdx: (0, pg_core_1.index)('kpis_tenant_name_idx').on(table.tenantId, table.name),
    tenantCalculatedIdx: (0, pg_core_1.index)('kpis_tenant_calculated_idx').on(table.tenantId, table.calculatedAt),
}));
exports.reports = (0, pg_core_1.pgTable)('reports', {
    ...baseColumns,
    type: (0, pg_core_1.text)('type').notNull(),
    parameters: (0, pg_core_1.jsonb)('parameters').notNull(),
    generatedAt: (0, pg_core_1.timestamp)('generated_at').defaultNow().notNull(),
    uri: (0, pg_core_1.text)('uri'),
    format: (0, pg_core_1.text)('format').default('json').notNull(),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantTypeIdx: (0, pg_core_1.index)('reports_tenant_type_idx').on(table.tenantId, table.type),
    tenantGeneratedIdx: (0, pg_core_1.index)('reports_tenant_generated_idx').on(table.tenantId, table.generatedAt),
}));
exports.forecasts = (0, pg_core_1.pgTable)('forecasts', {
    ...baseColumns,
    metricName: (0, pg_core_1.text)('metric_name').notNull(),
    horizon: (0, pg_core_1.integer)('horizon').notNull(),
    horizonUnit: (0, pg_core_1.text)('horizon_unit').notNull(),
    model: (0, pg_core_1.text)('model').notNull(),
    forecastValues: (0, pg_core_1.jsonb)('forecast_values').notNull(),
    confidenceInterval: (0, pg_core_1.decimal)('confidence_interval', { precision: 3, scale: 2 }),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantMetricIdx: (0, pg_core_1.index)('forecasts_tenant_metric_idx').on(table.tenantId, table.metricName),
    tenantCreatedIdx: (0, pg_core_1.index)('forecasts_tenant_created_idx').on(table.tenantId, table.createdAt),
}));
exports.factContracts = (0, pg_core_1.pgTable)('fact_contracts', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    eventId: (0, pg_core_1.text)('event_id').notNull(),
    eventType: (0, pg_core_1.text)('event_type').notNull(),
    occurredAt: (0, pg_core_1.timestamp)('occurred_at').notNull(),
    contractId: (0, pg_core_1.text)('contract_id').notNull(),
    customerId: (0, pg_core_1.text)('customer_id'),
    supplierId: (0, pg_core_1.text)('supplier_id'),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    quantity: (0, pg_core_1.decimal)('quantity', { precision: 15, scale: 3 }),
    unit: (0, pg_core_1.text)('unit'),
    price: (0, pg_core_1.decimal)('price', { precision: 10, scale: 4 }),
    currency: (0, pg_core_1.text)('currency').default('EUR'),
    status: (0, pg_core_1.text)('status'),
    deliveryStart: (0, pg_core_1.timestamp)('delivery_start'),
    deliveryEnd: (0, pg_core_1.timestamp)('delivery_end'),
    contractType: (0, pg_core_1.text)('contract_type'),
    hedgingRequired: (0, pg_core_1.boolean)('hedging_required').default(false),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantEventIdx: (0, pg_core_1.index)('fact_contracts_tenant_event_idx').on(table.tenantId, table.eventId),
    tenantCommodityIdx: (0, pg_core_1.index)('fact_contracts_tenant_commodity_idx').on(table.tenantId, table.commodity),
    tenantStatusIdx: (0, pg_core_1.index)('fact_contracts_tenant_status_idx').on(table.tenantId, table.status),
    tenantOccurredIdx: (0, pg_core_1.index)('fact_contracts_tenant_occurred_idx').on(table.tenantId, table.occurredAt),
}));
exports.factProduction = (0, pg_core_1.pgTable)('fact_production', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    eventId: (0, pg_core_1.text)('event_id').notNull(),
    eventType: (0, pg_core_1.text)('event_type').notNull(),
    occurredAt: (0, pg_core_1.timestamp)('occurred_at').notNull(),
    batchId: (0, pg_core_1.text)('batch_id').notNull(),
    contractId: (0, pg_core_1.text)('contract_id'),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    quantity: (0, pg_core_1.decimal)('quantity', { precision: 15, scale: 3 }),
    unit: (0, pg_core_1.text)('unit'),
    qualityGrade: (0, pg_core_1.text)('quality_grade'),
    moisture: (0, pg_core_1.decimal)('moisture', { precision: 5, scale: 2 }),
    protein: (0, pg_core_1.decimal)('protein', { precision: 5, scale: 2 }),
    status: (0, pg_core_1.text)('status'),
    siteId: (0, pg_core_1.text)('site_id'),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantEventIdx: (0, pg_core_1.index)('fact_production_tenant_event_idx').on(table.tenantId, table.eventId),
    tenantBatchIdx: (0, pg_core_1.index)('fact_production_tenant_batch_idx').on(table.tenantId, table.batchId),
    tenantCommodityIdx: (0, pg_core_1.index)('fact_production_tenant_commodity_idx').on(table.tenantId, table.commodity),
    tenantOccurredIdx: (0, pg_core_1.index)('fact_production_tenant_occurred_idx').on(table.tenantId, table.occurredAt),
}));
exports.factWeighing = (0, pg_core_1.pgTable)('fact_weighing', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    eventId: (0, pg_core_1.text)('event_id').notNull(),
    eventType: (0, pg_core_1.text)('event_type').notNull(),
    occurredAt: (0, pg_core_1.timestamp)('occurred_at').notNull(),
    ticketId: (0, pg_core_1.text)('ticket_id').notNull(),
    contractId: (0, pg_core_1.text)('contract_id'),
    orderId: (0, pg_core_1.text)('order_id'),
    customerId: (0, pg_core_1.text)('customer_id'),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    grossWeight: (0, pg_core_1.decimal)('gross_weight', { precision: 10, scale: 3 }),
    tareWeight: (0, pg_core_1.decimal)('tare_weight', { precision: 10, scale: 3 }),
    netWeight: (0, pg_core_1.decimal)('net_weight', { precision: 10, scale: 3 }),
    unit: (0, pg_core_1.text)('unit').default('kg'),
    tolerancePercent: (0, pg_core_1.decimal)('tolerance_percent', { precision: 5, scale: 2 }),
    isWithinTolerance: (0, pg_core_1.boolean)('is_within_tolerance'),
    status: (0, pg_core_1.text)('status'),
    siteId: (0, pg_core_1.text)('site_id'),
    gateId: (0, pg_core_1.text)('gate_id'),
    licensePlate: (0, pg_core_1.text)('license_plate'),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantEventIdx: (0, pg_core_1.index)('fact_weighing_tenant_event_idx').on(table.tenantId, table.eventId),
    tenantTicketIdx: (0, pg_core_1.index)('fact_weighing_tenant_ticket_idx').on(table.tenantId, table.ticketId),
    tenantCommodityIdx: (0, pg_core_1.index)('fact_weighing_tenant_commodity_idx').on(table.tenantId, table.commodity),
    tenantStatusIdx: (0, pg_core_1.index)('fact_weighing_tenant_status_idx').on(table.tenantId, table.status),
    tenantOccurredIdx: (0, pg_core_1.index)('fact_weighing_tenant_occurred_idx').on(table.tenantId, table.occurredAt),
}));
exports.factQuality = (0, pg_core_1.pgTable)('fact_quality', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    eventId: (0, pg_core_1.text)('event_id').notNull(),
    eventType: (0, pg_core_1.text)('event_type').notNull(),
    occurredAt: (0, pg_core_1.timestamp)('occurred_at').notNull(),
    sampleId: (0, pg_core_1.text)('sample_id').notNull(),
    batchId: (0, pg_core_1.text)('batch_id'),
    contractId: (0, pg_core_1.text)('contract_id'),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    testType: (0, pg_core_1.text)('test_type'),
    testResult: (0, pg_core_1.text)('test_result'),
    numericResult: (0, pg_core_1.decimal)('numeric_result', { precision: 10, scale: 4 }),
    unit: (0, pg_core_1.text)('unit'),
    isPassed: (0, pg_core_1.boolean)('is_passed'),
    testedBy: (0, pg_core_1.text)('tested_by'),
    siteId: (0, pg_core_1.text)('site_id'),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantEventIdx: (0, pg_core_1.index)('fact_quality_tenant_event_idx').on(table.tenantId, table.eventId),
    tenantSampleIdx: (0, pg_core_1.index)('fact_quality_tenant_sample_idx').on(table.tenantId, table.sampleId),
    tenantCommodityIdx: (0, pg_core_1.index)('fact_quality_tenant_commodity_idx').on(table.tenantId, table.commodity),
    tenantPassedIdx: (0, pg_core_1.index)('fact_quality_tenant_passed_idx').on(table.tenantId, table.isPassed),
    tenantOccurredIdx: (0, pg_core_1.index)('fact_quality_tenant_occurred_idx').on(table.tenantId, table.occurredAt),
}));
exports.factRegulatory = (0, pg_core_1.pgTable)('fact_regulatory', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    eventId: (0, pg_core_1.text)('event_id').notNull(),
    eventType: (0, pg_core_1.text)('event_type').notNull(),
    occurredAt: (0, pg_core_1.timestamp)('occurred_at').notNull(),
    batchId: (0, pg_core_1.text)('batch_id'),
    contractId: (0, pg_core_1.text)('contract_id'),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    labelType: (0, pg_core_1.text)('label_type'),
    isEligible: (0, pg_core_1.boolean)('is_eligible'),
    certificationNumber: (0, pg_core_1.text)('certification_number'),
    expiryDate: (0, pg_core_1.timestamp)('expiry_date'),
    issuedBy: (0, pg_core_1.text)('issued_by'),
    siteId: (0, pg_core_1.text)('site_id'),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantEventIdx: (0, pg_core_1.index)('fact_regulatory_tenant_event_idx').on(table.tenantId, table.eventId),
    tenantBatchIdx: (0, pg_core_1.index)('fact_regulatory_tenant_batch_idx').on(table.tenantId, table.batchId),
    tenantCommodityIdx: (0, pg_core_1.index)('fact_regulatory_tenant_commodity_idx').on(table.tenantId, table.commodity),
    tenantEligibleIdx: (0, pg_core_1.index)('fact_regulatory_tenant_eligible_idx').on(table.tenantId, table.isEligible),
    tenantOccurredIdx: (0, pg_core_1.index)('fact_regulatory_tenant_occurred_idx').on(table.tenantId, table.occurredAt),
}));
exports.factFinance = (0, pg_core_1.pgTable)('fact_finance', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    eventId: (0, pg_core_1.text)('event_id').notNull(),
    eventType: (0, pg_core_1.text)('event_type').notNull(),
    occurredAt: (0, pg_core_1.timestamp)('occurred_at').notNull(),
    invoiceId: (0, pg_core_1.text)('invoice_id'),
    contractId: (0, pg_core_1.text)('contract_id'),
    customerId: (0, pg_core_1.text)('customer_id'),
    supplierId: (0, pg_core_1.text)('supplier_id'),
    commodity: (0, pg_core_1.text)('commodity'),
    amount: (0, pg_core_1.decimal)('amount', { precision: 15, scale: 2 }),
    currency: (0, pg_core_1.text)('currency').default('EUR'),
    type: (0, pg_core_1.text)('type'),
    status: (0, pg_core_1.text)('status'),
    dueDate: (0, pg_core_1.timestamp)('due_date'),
    paidDate: (0, pg_core_1.timestamp)('paid_date'),
    metadata: (0, pg_core_1.jsonb)('metadata'),
}, (table) => ({
    tenantEventIdx: (0, pg_core_1.index)('fact_finance_tenant_event_idx').on(table.tenantId, table.eventId),
    tenantInvoiceIdx: (0, pg_core_1.index)('fact_finance_tenant_invoice_idx').on(table.tenantId, table.invoiceId),
    tenantCustomerIdx: (0, pg_core_1.index)('fact_finance_tenant_customer_idx').on(table.tenantId, table.customerId),
    tenantStatusIdx: (0, pg_core_1.index)('fact_finance_tenant_status_idx').on(table.tenantId, table.status),
    tenantOccurredIdx: (0, pg_core_1.index)('fact_finance_tenant_occurred_idx').on(table.tenantId, table.occurredAt),
}));
exports.mvContractPositions = (0, pg_core_1.pgTable)('mv_contract_positions', {
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    month: (0, pg_core_1.text)('month').notNull(),
    shortPosition: (0, pg_core_1.decimal)('short_position', { precision: 15, scale: 3 }).default('0'),
    longPosition: (0, pg_core_1.decimal)('long_position', { precision: 15, scale: 3 }).default('0'),
    netPosition: (0, pg_core_1.decimal)('net_position', { precision: 15, scale: 3 }).default('0'),
    hedgingRatio: (0, pg_core_1.decimal)('hedging_ratio', { precision: 5, scale: 4 }),
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow().notNull(),
}, (table) => ({
    tenantCommodityMonthIdx: (0, pg_core_1.index)('mv_contract_positions_tenant_commodity_month_idx').on(table.tenantId, table.commodity, table.month),
}));
exports.mvInventoryBalances = (0, pg_core_1.pgTable)('mv_inventory_balances', {
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    siteId: (0, pg_core_1.text)('site_id'),
    currentBalance: (0, pg_core_1.decimal)('current_balance', { precision: 15, scale: 3 }).default('0'),
    reservedBalance: (0, pg_core_1.decimal)('reserved_balance', { precision: 15, scale: 3 }).default('0'),
    availableBalance: (0, pg_core_1.decimal)('available_balance', { precision: 15, scale: 3 }).default('0'),
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow().notNull(),
}, (table) => ({
    tenantCommodityIdx: (0, pg_core_1.index)('mv_inventory_balances_tenant_commodity_idx').on(table.tenantId, table.commodity),
}));
exports.mvQualityStats = (0, pg_core_1.pgTable)('mv_quality_stats', {
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    period: (0, pg_core_1.text)('period').notNull(),
    totalSamples: (0, pg_core_1.integer)('total_samples').default(0),
    passedSamples: (0, pg_core_1.integer)('passed_samples').default(0),
    failedSamples: (0, pg_core_1.integer)('failed_samples').default(0),
    passRate: (0, pg_core_1.decimal)('pass_rate', { precision: 5, scale: 4 }),
    failureRate: (0, pg_core_1.decimal)('failure_rate', { precision: 5, scale: 4 }),
    avgMoisture: (0, pg_core_1.decimal)('avg_moisture', { precision: 5, scale: 2 }),
    avgProtein: (0, pg_core_1.decimal)('avg_protein', { precision: 5, scale: 2 }),
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow().notNull(),
}, (table) => ({
    tenantCommodityPeriodIdx: (0, pg_core_1.index)('mv_quality_stats_tenant_commodity_period_idx').on(table.tenantId, table.commodity, table.period),
}));
exports.mvRegulatoryStats = (0, pg_core_1.pgTable)('mv_regulatory_stats', {
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    labelType: (0, pg_core_1.text)('label_type').notNull(),
    period: (0, pg_core_1.text)('period').notNull(),
    totalEligible: (0, pg_core_1.integer)('total_eligible').default(0),
    totalIneligible: (0, pg_core_1.integer)('total_ineligible').default(0),
    eligibilityRate: (0, pg_core_1.decimal)('eligibility_rate', { precision: 5, scale: 4 }),
    ineligibilityRate: (0, pg_core_1.decimal)('ineligibility_rate', { precision: 5, scale: 4 }),
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow().notNull(),
}, (table) => ({
    tenantCommodityLabelPeriodIdx: (0, pg_core_1.index)('mv_regulatory_stats_tenant_commodity_label_period_idx').on(table.tenantId, table.commodity, table.labelType, table.period),
}));
exports.mvFinanceKpis = (0, pg_core_1.pgTable)('mv_finance_kpis', {
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity'),
    customerId: (0, pg_core_1.text)('customer_id'),
    period: (0, pg_core_1.text)('period').notNull(),
    totalRevenue: (0, pg_core_1.decimal)('total_revenue', { precision: 15, scale: 2 }).default('0'),
    totalCost: (0, pg_core_1.decimal)('total_cost', { precision: 15, scale: 2 }).default('0'),
    grossMargin: (0, pg_core_1.decimal)('gross_margin', { precision: 15, scale: 2 }).default('0'),
    marginPercentage: (0, pg_core_1.decimal)('margin_percentage', { precision: 5, scale: 4 }),
    outstandingInvoices: (0, pg_core_1.decimal)('outstanding_invoices', { precision: 15, scale: 2 }).default('0'),
    overdueInvoices: (0, pg_core_1.decimal)('overdue_invoices', { precision: 15, scale: 2 }).default('0'),
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow().notNull(),
}, (table) => ({
    tenantCommodityPeriodIdx: (0, pg_core_1.index)('mv_finance_kpis_tenant_commodity_period_idx').on(table.tenantId, table.commodity, table.period),
}));
exports.mvWeighingVolumes = (0, pg_core_1.pgTable)('mv_weighing_volumes', {
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    customerId: (0, pg_core_1.text)('customer_id'),
    siteId: (0, pg_core_1.text)('site_id'),
    period: (0, pg_core_1.text)('period').notNull(),
    totalWeight: (0, pg_core_1.decimal)('total_weight', { precision: 15, scale: 3 }).default('0'),
    totalTickets: (0, pg_core_1.integer)('total_tickets').default(0),
    avgWeight: (0, pg_core_1.decimal)('avg_weight', { precision: 10, scale: 3 }),
    withinTolerance: (0, pg_core_1.integer)('within_tolerance').default(0),
    outsideTolerance: (0, pg_core_1.integer)('outside_tolerance').default(0),
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow().notNull(),
}, (table) => ({
    tenantCommodityPeriodIdx: (0, pg_core_1.index)('mv_weighing_volumes_tenant_commodity_period_idx').on(table.tenantId, table.commodity, table.period),
}));
//# sourceMappingURL=schema.js.map
name: Analytics Domain CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/analytics-domain/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/analytics-domain/**'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/analytics-domain

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: analytics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      nats:
        image: nats:2.10
        ports:
          - 4222:4222

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: packages/analytics-domain/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run security audit
        run: npm run security:audit

      - name: Run tests
        run: npm run test:ci
        env:
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/analytics_test
          NATS_URL: nats://localhost:4222

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: packages/analytics-domain/coverage/coverage-final.json
          flags: analytics-domain
          name: analytics-domain

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: packages/analytics-domain/test-results.json

  build:
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/analytics-domain

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: packages/analytics-domain/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analytics-domain-build
          path: packages/analytics-domain/dist/

  docker:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/analytics-domain

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: analytics-domain-build
          path: packages/analytics-domain/dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.valero-neuroerp.com
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: registry.valero-neuroerp.com/analytics-domain
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: packages/analytics-domain
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment commands here

  deploy-production:
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add deployment commands here
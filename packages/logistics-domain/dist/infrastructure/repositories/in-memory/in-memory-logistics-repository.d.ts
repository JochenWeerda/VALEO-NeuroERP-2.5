import { Shipment } from '../../../core/entities/shipment';
import { RoutePlan } from '../../../core/entities/route-plan';
import { DispatchAssignment } from '../../../core/entities/dispatch-assignment';
import { YardVisit } from '../../../core/entities/yard-visit';
import { TelemetryRecord } from '../../../core/entities/telemetry-record';
import { ProofOfDelivery } from '../../../core/entities/proof-of-delivery';
import { WeighingRecord } from '../../../core/entities/weighing-record';
import { FreightRate } from '../../../core/entities/freight-rate';
import { CarrierDocument } from '../../../core/entities/carrier-document';
import { EmissionRecord } from '../../../core/entities/emission-record';
import { SafetyAlert } from '../../../core/entities/safety-alert';
import { ReturnOrder } from '../../../core/entities/return-order';
import { CarrierDocumentRepository, DispatchRepository, EmissionRepository, FreightRateRepository, ProofOfDeliveryRepository, ReturnOrderRepository, RoutePlanRepository, SafetyAlertRepository, ShipmentRepository, TelemetryRepository, WeighingRepository, YardRepository } from '../interfaces/logistics-repositories';
export declare class InMemoryLogisticsRepository implements ShipmentRepository, RoutePlanRepository, DispatchRepository, YardRepository, TelemetryRepository, ProofOfDeliveryRepository, WeighingRepository, FreightRateRepository, CarrierDocumentRepository, EmissionRepository, SafetyAlertRepository, ReturnOrderRepository {
    private readonly shipments;
    private readonly routesById;
    private readonly routesByShipment;
    private readonly assignments;
    private readonly yardVisits;
    private readonly telemetry;
    private readonly pods;
    private readonly weighings;
    private readonly freightRates;
    private readonly carrierDocs;
    private readonly emissions;
    private readonly safetyAlerts;
    private readonly returnOrders;
    saveShipment(shipment: Shipment): Promise<void>;
    findShipmentById(tenantId: string, shipmentId: string): Promise<Shipment | undefined>;
    listShipmentsByTenant(tenantId: string): Promise<Shipment[]>;
    saveRoutePlan(routePlan: RoutePlan): Promise<void>;
    findRoutePlanById(tenantId: string, routeId: string): Promise<RoutePlan | undefined>;
    findRoutePlanByShipmentId(tenantId: string, shipmentId: string): Promise<RoutePlan | undefined>;
    saveAssignment(assignment: DispatchAssignment): Promise<void>;
    findAssignmentByRouteId(tenantId: string, routeId: string): Promise<DispatchAssignment | undefined>;
    saveYardVisit(visit: YardVisit): Promise<void>;
    findYardVisitByShipmentId(tenantId: string, shipmentId: string): Promise<YardVisit | undefined>;
    saveTelemetry(record: TelemetryRecord): Promise<void>;
    listRecentTelemetryByVehicle(tenantId: string, vehicleId: string, limit: number): Promise<TelemetryRecord[]>;
    saveProofOfDelivery(pod: ProofOfDelivery): Promise<void>;
    saveWeighing(record: WeighingRecord): Promise<void>;
    saveFreightRate(rate: FreightRate): Promise<void>;
    saveCarrierDocument(document: CarrierDocument): Promise<void>;
    saveEmission(record: EmissionRecord): Promise<void>;
    saveSafetyAlert(alert: SafetyAlert): Promise<void>;
    saveReturnOrder(order: ReturnOrder): Promise<void>;
    findReturnOrderById(tenantId: string, returnId: string): Promise<ReturnOrder | undefined>;
    private ensureBucket;
    private ensureTelemetryBucket;
}
//# sourceMappingURL=in-memory-logistics-repository.d.ts.map
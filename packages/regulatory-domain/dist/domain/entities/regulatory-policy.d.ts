import { z } from 'zod';
export declare const PolicyScopeEnum: z.ZodEnum<["Commodity", "Process", "Site", "Contract", "Supplier", "Global"]>;
export type PolicyScope = z.infer<typeof PolicyScopeEnum>;
export declare const PolicyKeyEnum: z.ZodEnum<["VLOG", "QS", "REDII", "PSM", "GMP_PLUS", "NON_GMO", "ORGANIC", "TRACEABILITY", "HYGIENE", "CUSTOM"]>;
export type PolicyKey = z.infer<typeof PolicyKeyEnum>;
export declare const PolicyRuleSchema: z.ZodObject<{
    ruleId: z.ZodString;
    description: z.ZodString;
    type: z.ZodEnum<["Input", "Process", "Documentation", "Lab", "Monitoring", "GHG"]>;
    criteriaKey: z.ZodString;
    criteriaValue: z.ZodOptional<z.ZodAny>;
    frequency: z.ZodOptional<z.ZodEnum<["PerBatch", "Daily", "Weekly", "Monthly", "Annually", "OnDemand"]>>;
    evidenceRequired: z.ZodDefault<z.ZodBoolean>;
    evidenceType: z.ZodOptional<z.ZodString>;
    violationSeverity: z.ZodDefault<z.ZodEnum<["Minor", "Major", "Critical"]>>;
}, "strip", z.ZodTypeAny, {
    type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
    ruleId: string;
    description: string;
    criteriaKey: string;
    evidenceRequired: boolean;
    violationSeverity: "Minor" | "Major" | "Critical";
    criteriaValue?: any;
    frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
    evidenceType?: string | undefined;
}, {
    type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
    ruleId: string;
    description: string;
    criteriaKey: string;
    criteriaValue?: any;
    frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
    evidenceRequired?: boolean | undefined;
    evidenceType?: string | undefined;
    violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
}>;
export type PolicyRule = z.infer<typeof PolicyRuleSchema>;
export declare const RegulatoryPolicySchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    tenantId: z.ZodString;
    key: z.ZodEnum<["VLOG", "QS", "REDII", "PSM", "GMP_PLUS", "NON_GMO", "ORGANIC", "TRACEABILITY", "HYGIENE", "CUSTOM"]>;
    version: z.ZodDefault<z.ZodString>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    scope: z.ZodEnum<["Commodity", "Process", "Site", "Contract", "Supplier", "Global"]>;
    scopeValue: z.ZodOptional<z.ZodString>;
    rules: z.ZodArray<z.ZodObject<{
        ruleId: z.ZodString;
        description: z.ZodString;
        type: z.ZodEnum<["Input", "Process", "Documentation", "Lab", "Monitoring", "GHG"]>;
        criteriaKey: z.ZodString;
        criteriaValue: z.ZodOptional<z.ZodAny>;
        frequency: z.ZodOptional<z.ZodEnum<["PerBatch", "Daily", "Weekly", "Monthly", "Annually", "OnDemand"]>>;
        evidenceRequired: z.ZodDefault<z.ZodBoolean>;
        evidenceType: z.ZodOptional<z.ZodString>;
        violationSeverity: z.ZodDefault<z.ZodEnum<["Minor", "Major", "Critical"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        evidenceRequired: boolean;
        violationSeverity: "Minor" | "Major" | "Critical";
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceType?: string | undefined;
    }, {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceRequired?: boolean | undefined;
        evidenceType?: string | undefined;
        violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
    }>, "many">;
    active: z.ZodDefault<z.ZodBoolean>;
    validFrom: z.ZodString;
    validTo: z.ZodOptional<z.ZodString>;
    standardReference: z.ZodOptional<z.ZodString>;
    legalBasis: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodString>;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    tenantId: string;
    key: "VLOG" | "QS" | "REDII" | "PSM" | "GMP_PLUS" | "NON_GMO" | "ORGANIC" | "TRACEABILITY" | "HYGIENE" | "CUSTOM";
    version: string;
    name: string;
    scope: "Commodity" | "Process" | "Site" | "Contract" | "Supplier" | "Global";
    rules: {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        evidenceRequired: boolean;
        violationSeverity: "Minor" | "Major" | "Critical";
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceType?: string | undefined;
    }[];
    active: boolean;
    validFrom: string;
    description?: string | undefined;
    id?: string | undefined;
    scopeValue?: string | undefined;
    validTo?: string | undefined;
    standardReference?: string | undefined;
    legalBasis?: string | undefined;
    createdAt?: string | undefined;
    createdBy?: string | undefined;
    updatedAt?: string | undefined;
    updatedBy?: string | undefined;
}, {
    tenantId: string;
    key: "VLOG" | "QS" | "REDII" | "PSM" | "GMP_PLUS" | "NON_GMO" | "ORGANIC" | "TRACEABILITY" | "HYGIENE" | "CUSTOM";
    name: string;
    scope: "Commodity" | "Process" | "Site" | "Contract" | "Supplier" | "Global";
    rules: {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceRequired?: boolean | undefined;
        evidenceType?: string | undefined;
        violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
    }[];
    validFrom: string;
    description?: string | undefined;
    id?: string | undefined;
    version?: string | undefined;
    scopeValue?: string | undefined;
    active?: boolean | undefined;
    validTo?: string | undefined;
    standardReference?: string | undefined;
    legalBasis?: string | undefined;
    createdAt?: string | undefined;
    createdBy?: string | undefined;
    updatedAt?: string | undefined;
    updatedBy?: string | undefined;
}>;
export type RegulatoryPolicy = z.infer<typeof RegulatoryPolicySchema>;
export declare const CreateRegulatoryPolicySchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    tenantId: z.ZodString;
    key: z.ZodEnum<["VLOG", "QS", "REDII", "PSM", "GMP_PLUS", "NON_GMO", "ORGANIC", "TRACEABILITY", "HYGIENE", "CUSTOM"]>;
    version: z.ZodDefault<z.ZodString>;
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    scope: z.ZodEnum<["Commodity", "Process", "Site", "Contract", "Supplier", "Global"]>;
    scopeValue: z.ZodOptional<z.ZodString>;
    rules: z.ZodArray<z.ZodObject<{
        ruleId: z.ZodString;
        description: z.ZodString;
        type: z.ZodEnum<["Input", "Process", "Documentation", "Lab", "Monitoring", "GHG"]>;
        criteriaKey: z.ZodString;
        criteriaValue: z.ZodOptional<z.ZodAny>;
        frequency: z.ZodOptional<z.ZodEnum<["PerBatch", "Daily", "Weekly", "Monthly", "Annually", "OnDemand"]>>;
        evidenceRequired: z.ZodDefault<z.ZodBoolean>;
        evidenceType: z.ZodOptional<z.ZodString>;
        violationSeverity: z.ZodDefault<z.ZodEnum<["Minor", "Major", "Critical"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        evidenceRequired: boolean;
        violationSeverity: "Minor" | "Major" | "Critical";
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceType?: string | undefined;
    }, {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceRequired?: boolean | undefined;
        evidenceType?: string | undefined;
        violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
    }>, "many">;
    active: z.ZodDefault<z.ZodBoolean>;
    validFrom: z.ZodString;
    validTo: z.ZodOptional<z.ZodString>;
    standardReference: z.ZodOptional<z.ZodString>;
    legalBasis: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodOptional<z.ZodString>;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedAt: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "id" | "createdAt" | "updatedAt">, "strip", z.ZodTypeAny, {
    tenantId: string;
    key: "VLOG" | "QS" | "REDII" | "PSM" | "GMP_PLUS" | "NON_GMO" | "ORGANIC" | "TRACEABILITY" | "HYGIENE" | "CUSTOM";
    version: string;
    name: string;
    scope: "Commodity" | "Process" | "Site" | "Contract" | "Supplier" | "Global";
    rules: {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        evidenceRequired: boolean;
        violationSeverity: "Minor" | "Major" | "Critical";
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceType?: string | undefined;
    }[];
    active: boolean;
    validFrom: string;
    description?: string | undefined;
    scopeValue?: string | undefined;
    validTo?: string | undefined;
    standardReference?: string | undefined;
    legalBasis?: string | undefined;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
}, {
    tenantId: string;
    key: "VLOG" | "QS" | "REDII" | "PSM" | "GMP_PLUS" | "NON_GMO" | "ORGANIC" | "TRACEABILITY" | "HYGIENE" | "CUSTOM";
    name: string;
    scope: "Commodity" | "Process" | "Site" | "Contract" | "Supplier" | "Global";
    rules: {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceRequired?: boolean | undefined;
        evidenceType?: string | undefined;
        violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
    }[];
    validFrom: string;
    description?: string | undefined;
    version?: string | undefined;
    scopeValue?: string | undefined;
    active?: boolean | undefined;
    validTo?: string | undefined;
    standardReference?: string | undefined;
    legalBasis?: string | undefined;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
}>;
export type CreateRegulatoryPolicy = z.infer<typeof CreateRegulatoryPolicySchema>;
export declare const UpdateRegulatoryPolicySchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    tenantId: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodEnum<["VLOG", "QS", "REDII", "PSM", "GMP_PLUS", "NON_GMO", "ORGANIC", "TRACEABILITY", "HYGIENE", "CUSTOM"]>>;
    version: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    scope: z.ZodOptional<z.ZodEnum<["Commodity", "Process", "Site", "Contract", "Supplier", "Global"]>>;
    scopeValue: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    rules: z.ZodOptional<z.ZodArray<z.ZodObject<{
        ruleId: z.ZodString;
        description: z.ZodString;
        type: z.ZodEnum<["Input", "Process", "Documentation", "Lab", "Monitoring", "GHG"]>;
        criteriaKey: z.ZodString;
        criteriaValue: z.ZodOptional<z.ZodAny>;
        frequency: z.ZodOptional<z.ZodEnum<["PerBatch", "Daily", "Weekly", "Monthly", "Annually", "OnDemand"]>>;
        evidenceRequired: z.ZodDefault<z.ZodBoolean>;
        evidenceType: z.ZodOptional<z.ZodString>;
        violationSeverity: z.ZodDefault<z.ZodEnum<["Minor", "Major", "Critical"]>>;
    }, "strip", z.ZodTypeAny, {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        evidenceRequired: boolean;
        violationSeverity: "Minor" | "Major" | "Critical";
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceType?: string | undefined;
    }, {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceRequired?: boolean | undefined;
        evidenceType?: string | undefined;
        violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
    }>, "many">>;
    active: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    validFrom: z.ZodOptional<z.ZodString>;
    validTo: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    standardReference: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    legalBasis: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    createdBy: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedAt: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    updatedBy: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "id" | "tenantId" | "createdAt" | "createdBy">, "strip", z.ZodTypeAny, {
    description?: string | undefined;
    key?: "VLOG" | "QS" | "REDII" | "PSM" | "GMP_PLUS" | "NON_GMO" | "ORGANIC" | "TRACEABILITY" | "HYGIENE" | "CUSTOM" | undefined;
    version?: string | undefined;
    name?: string | undefined;
    scope?: "Commodity" | "Process" | "Site" | "Contract" | "Supplier" | "Global" | undefined;
    scopeValue?: string | undefined;
    rules?: {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        evidenceRequired: boolean;
        violationSeverity: "Minor" | "Major" | "Critical";
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceType?: string | undefined;
    }[] | undefined;
    active?: boolean | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
    standardReference?: string | undefined;
    legalBasis?: string | undefined;
    updatedAt?: string | undefined;
    updatedBy?: string | undefined;
}, {
    description?: string | undefined;
    key?: "VLOG" | "QS" | "REDII" | "PSM" | "GMP_PLUS" | "NON_GMO" | "ORGANIC" | "TRACEABILITY" | "HYGIENE" | "CUSTOM" | undefined;
    version?: string | undefined;
    name?: string | undefined;
    scope?: "Commodity" | "Process" | "Site" | "Contract" | "Supplier" | "Global" | undefined;
    scopeValue?: string | undefined;
    rules?: {
        type: "Process" | "Input" | "Documentation" | "Lab" | "Monitoring" | "GHG";
        ruleId: string;
        description: string;
        criteriaKey: string;
        criteriaValue?: any;
        frequency?: "PerBatch" | "Daily" | "Weekly" | "Monthly" | "Annually" | "OnDemand" | undefined;
        evidenceRequired?: boolean | undefined;
        evidenceType?: string | undefined;
        violationSeverity?: "Minor" | "Major" | "Critical" | undefined;
    }[] | undefined;
    active?: boolean | undefined;
    validFrom?: string | undefined;
    validTo?: string | undefined;
    standardReference?: string | undefined;
    legalBasis?: string | undefined;
    updatedAt?: string | undefined;
    updatedBy?: string | undefined;
}>;
export type UpdateRegulatoryPolicy = z.infer<typeof UpdateRegulatoryPolicySchema>;
export declare const VLOG_DEFAULT_RULES: PolicyRule[];
export declare const QS_DEFAULT_RULES: PolicyRule[];
//# sourceMappingURL=regulatory-policy.d.ts.map
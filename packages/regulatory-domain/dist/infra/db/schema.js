"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.complianceCases = exports.ghgPathways = exports.psmProductRefs = exports.evidences = exports.labels = exports.regulatoryPolicies = void 0;
const pg_core_1 = require("drizzle-orm/pg-core");
exports.regulatoryPolicies = (0, pg_core_1.pgTable)('regulatory_policies', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    key: (0, pg_core_1.text)('key').notNull(),
    version: (0, pg_core_1.text)('version').default('1.0').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    scope: (0, pg_core_1.text)('scope').notNull(),
    scopeValue: (0, pg_core_1.text)('scope_value'),
    rules: (0, pg_core_1.jsonb)('rules').notNull(),
    active: (0, pg_core_1.boolean)('active').default(true).notNull(),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }).notNull(),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    standardReference: (0, pg_core_1.text)('standard_reference'),
    legalBasis: (0, pg_core_1.text)('legal_basis'),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    createdBy: (0, pg_core_1.text)('created_by'),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
    updatedBy: (0, pg_core_1.text)('updated_by'),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('rp_tenant_idx').on(table.tenantId),
    keyIdx: (0, pg_core_1.index)('rp_key_idx').on(table.key),
    scopeIdx: (0, pg_core_1.index)('rp_scope_idx').on(table.scope),
    activeIdx: (0, pg_core_1.index)('rp_active_idx').on(table.active),
}));
exports.labels = (0, pg_core_1.pgTable)('labels', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    code: (0, pg_core_1.text)('code').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    targetType: (0, pg_core_1.text)('target_type').notNull(),
    targetId: (0, pg_core_1.text)('target_id').notNull(),
    status: (0, pg_core_1.text)('status').default('Pending').notNull(),
    evidenceRefs: (0, pg_core_1.jsonb)('evidence_refs').default([]).notNull(),
    missingEvidences: (0, pg_core_1.jsonb)('missing_evidences'),
    issuedAt: (0, pg_core_1.timestamp)('issued_at', { withTimezone: true }),
    issuedBy: (0, pg_core_1.text)('issued_by'),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    revokedAt: (0, pg_core_1.timestamp)('revoked_at', { withTimezone: true }),
    revokedBy: (0, pg_core_1.text)('revoked_by'),
    revokedReason: (0, pg_core_1.text)('revoked_reason'),
    policyId: (0, pg_core_1.uuid)('policy_id'),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('label_tenant_idx').on(table.tenantId),
    codeIdx: (0, pg_core_1.index)('label_code_idx').on(table.code),
    targetIdx: (0, pg_core_1.index)('label_target_idx').on(table.targetType, table.targetId),
    statusIdx: (0, pg_core_1.index)('label_status_idx').on(table.status),
}));
exports.evidences = (0, pg_core_1.pgTable)('evidences', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    type: (0, pg_core_1.text)('type').notNull(),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description'),
    uri: (0, pg_core_1.text)('uri'),
    hash: (0, pg_core_1.text)('hash'),
    mimeType: (0, pg_core_1.text)('mime_type'),
    fileSize: (0, pg_core_1.numeric)('file_size'),
    issuedBy: (0, pg_core_1.text)('issued_by').notNull(),
    issuedAt: (0, pg_core_1.timestamp)('issued_at', { withTimezone: true }).notNull(),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    status: (0, pg_core_1.text)('status').default('Valid').notNull(),
    relatedRef: (0, pg_core_1.jsonb)('related_ref'),
    supportingLabels: (0, pg_core_1.jsonb)('supporting_labels').default([]).notNull(),
    supportingPolicies: (0, pg_core_1.jsonb)('supporting_policies').default([]).notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    createdBy: (0, pg_core_1.text)('created_by'),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('ev_tenant_idx').on(table.tenantId),
    typeIdx: (0, pg_core_1.index)('ev_type_idx').on(table.type),
    statusIdx: (0, pg_core_1.index)('ev_status_idx').on(table.status),
    validToIdx: (0, pg_core_1.index)('ev_valid_to_idx').on(table.validTo),
}));
exports.psmProductRefs = (0, pg_core_1.pgTable)('psm_product_refs', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    bvlId: (0, pg_core_1.text)('bvl_id'),
    name: (0, pg_core_1.text)('name').notNull(),
    activeSubstances: (0, pg_core_1.jsonb)('active_substances').default([]).notNull(),
    approvalStatus: (0, pg_core_1.text)('approval_status').default('Unknown').notNull(),
    approvalValidTo: (0, pg_core_1.timestamp)('approval_valid_to', { withTimezone: true }),
    approvalNumber: (0, pg_core_1.text)('approval_number'),
    usageScope: (0, pg_core_1.text)('usage_scope'),
    restrictions: (0, pg_core_1.jsonb)('restrictions'),
    lastCheckedAt: (0, pg_core_1.timestamp)('last_checked_at', { withTimezone: true }),
    lastCheckedBy: (0, pg_core_1.text)('last_checked_by'),
    sourceUrl: (0, pg_core_1.text)('source_url'),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('psm_tenant_idx').on(table.tenantId),
    bvlIdIdx: (0, pg_core_1.index)('psm_bvl_id_idx').on(table.bvlId),
    nameIdx: (0, pg_core_1.index)('psm_name_idx').on(table.name),
    statusIdx: (0, pg_core_1.index)('psm_status_idx').on(table.approvalStatus),
}));
exports.ghgPathways = (0, pg_core_1.pgTable)('ghg_pathways', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    commodity: (0, pg_core_1.text)('commodity').notNull(),
    pathwayKey: (0, pg_core_1.text)('pathway_key').notNull(),
    description: (0, pg_core_1.text)('description'),
    method: (0, pg_core_1.text)('method').notNull(),
    standard: (0, pg_core_1.text)('standard').default('REDII').notNull(),
    factors: (0, pg_core_1.jsonb)('factors').notNull(),
    totalEmissions: (0, pg_core_1.numeric)('total_emissions', { precision: 10, scale: 2 }).notNull(),
    emissionsPerTon: (0, pg_core_1.numeric)('emissions_per_ton', { precision: 10, scale: 2 }),
    savingsVsFossil: (0, pg_core_1.numeric)('savings_vs_fossil', { precision: 5, scale: 2 }),
    rediiThreshold: (0, pg_core_1.numeric)('redii_threshold', { precision: 5, scale: 2 }),
    rediiCompliant: (0, pg_core_1.boolean)('redii_compliant'),
    dataSources: (0, pg_core_1.jsonb)('data_sources'),
    calculatedAt: (0, pg_core_1.timestamp)('calculated_at', { withTimezone: true }),
    calculatedBy: (0, pg_core_1.text)('calculated_by'),
    validFrom: (0, pg_core_1.timestamp)('valid_from', { withTimezone: true }),
    validTo: (0, pg_core_1.timestamp)('valid_to', { withTimezone: true }),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('ghg_tenant_idx').on(table.tenantId),
    commodityIdx: (0, pg_core_1.index)('ghg_commodity_idx').on(table.commodity),
    pathwayIdx: (0, pg_core_1.index)('ghg_pathway_idx').on(table.pathwayKey),
    methodIdx: (0, pg_core_1.index)('ghg_method_idx').on(table.method),
}));
exports.complianceCases = (0, pg_core_1.pgTable)('compliance_cases', {
    id: (0, pg_core_1.uuid)('id').primaryKey().defaultRandom(),
    tenantId: (0, pg_core_1.text)('tenant_id').notNull(),
    caseNumber: (0, pg_core_1.text)('case_number').notNull().unique(),
    type: (0, pg_core_1.text)('type').notNull(),
    severity: (0, pg_core_1.text)('severity').notNull(),
    ref: (0, pg_core_1.jsonb)('ref').notNull(),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    policyId: (0, pg_core_1.uuid)('policy_id'),
    labelCode: (0, pg_core_1.text)('label_code'),
    ruleId: (0, pg_core_1.text)('rule_id'),
    detectedAt: (0, pg_core_1.timestamp)('detected_at', { withTimezone: true }).notNull(),
    detectedBy: (0, pg_core_1.text)('detected_by').notNull(),
    detectionMethod: (0, pg_core_1.text)('detection_method'),
    status: (0, pg_core_1.text)('status').default('Open').notNull(),
    immediateAction: (0, pg_core_1.text)('immediate_action'),
    capaId: (0, pg_core_1.uuid)('capa_id'),
    impactedBatches: (0, pg_core_1.jsonb)('impacted_batches'),
    impactedLabels: (0, pg_core_1.jsonb)('impacted_labels'),
    resolvedAt: (0, pg_core_1.timestamp)('resolved_at', { withTimezone: true }),
    resolvedBy: (0, pg_core_1.text)('resolved_by'),
    resolution: (0, pg_core_1.text)('resolution'),
    closedAt: (0, pg_core_1.timestamp)('closed_at', { withTimezone: true }),
    closedBy: (0, pg_core_1.text)('closed_by'),
    createdAt: (0, pg_core_1.timestamp)('created_at', { withTimezone: true }).defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at', { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    tenantIdx: (0, pg_core_1.index)('cc_tenant_idx').on(table.tenantId),
    caseNumberIdx: (0, pg_core_1.index)('cc_case_number_idx').on(table.caseNumber),
    typeIdx: (0, pg_core_1.index)('cc_type_idx').on(table.type),
    statusIdx: (0, pg_core_1.index)('cc_status_idx').on(table.status),
    severityIdx: (0, pg_core_1.index)('cc_severity_idx').on(table.severity),
    detectedAtIdx: (0, pg_core_1.index)('cc_detected_at_idx').on(table.detectedAt),
}));
//# sourceMappingURL=schema.js.map
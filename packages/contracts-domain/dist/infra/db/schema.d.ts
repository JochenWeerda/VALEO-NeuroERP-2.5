export declare const contractTypeEnum: import("drizzle-orm").SQL<unknown>;
export declare const commodityTypeEnum: import("drizzle-orm").SQL<unknown>;
export declare const contractStatusEnum: import("drizzle-orm").SQL<unknown>;
export declare const pricingModeEnum: import("drizzle-orm").SQL<unknown>;
export declare const shipmentTypeEnum: import("drizzle-orm").SQL<unknown>;
export declare const titleTransferTypeEnum: import("drizzle-orm").SQL<unknown>;
export declare const callOffStatusEnum: import("drizzle-orm").SQL<unknown>;
export declare const amendmentTypeEnum: import("drizzle-orm").SQL<unknown>;
export declare const amendmentStatusEnum: import("drizzle-orm").SQL<unknown>;
export declare const contracts: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "contracts";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        tenantId: import("drizzle-orm/pg-core").PgColumn<{
            name: "tenant_id";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        contractNo: import("drizzle-orm/pg-core").PgColumn<{
            name: "contract_no";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        type: import("drizzle-orm/pg-core").PgColumn<{
            name: "type";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "Buy" | "Sell";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["Buy", "Sell"];
            baseColumn: never;
        }, {}, {}>;
        commodity: import("drizzle-orm/pg-core").PgColumn<{
            name: "commodity";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "WHEAT" | "BARLEY" | "RAPESEED" | "SOYMEAL" | "COMPOUND_FEED" | "FERTILIZER";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["WHEAT", "BARLEY", "RAPESEED", "SOYMEAL", "COMPOUND_FEED", "FERTILIZER"];
            baseColumn: never;
        }, {}, {}>;
        counterpartyId: import("drizzle-orm/pg-core").PgColumn<{
            name: "counterparty_id";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        incoterm: import("drizzle-orm/pg-core").PgColumn<{
            name: "incoterm";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        deliveryWindowFrom: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivery_window_from";
            tableName: "contracts";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        deliveryWindowTo: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivery_window_to";
            tableName: "contracts";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        qtyUnit: import("drizzle-orm/pg-core").PgColumn<{
            name: "qty_unit";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "t" | "mt";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["t", "mt"];
            baseColumn: never;
        }, {}, {}>;
        qtyContracted: import("drizzle-orm/pg-core").PgColumn<{
            name: "qty_contracted";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        qtyTolerance: import("drizzle-orm/pg-core").PgColumn<{
            name: "qty_tolerance";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        pricingMode: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_mode";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "FORWARD_CASH" | "BASIS" | "HTA" | "DEFERRED" | "MIN_PRICE" | "FIXED" | "INDEXED";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["FORWARD_CASH", "BASIS", "HTA", "DEFERRED", "MIN_PRICE", "FIXED", "INDEXED"];
            baseColumn: never;
        }, {}, {}>;
        pricingReferenceMarket: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_reference_market";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "CME" | "EURONEXT" | "CASH_INDEX";
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: ["CME", "EURONEXT", "CASH_INDEX"];
            baseColumn: never;
        }, {}, {}>;
        pricingFuturesMonth: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_futures_month";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        pricingBasis: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_basis";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        pricingFees: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_fees";
            tableName: "contracts";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        pricingFx: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_fx";
            tableName: "contracts";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        pricingLastFixingAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "pricing_last_fixing_at";
            tableName: "contracts";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        deliveryShipmentType: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivery_shipment_type";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "Spot" | "Window" | "CallOff";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["Spot", "Window", "CallOff"];
            baseColumn: never;
        }, {}, {}>;
        deliveryParity: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivery_parity";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        deliveryStorage: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivery_storage";
            tableName: "contracts";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        deliveryQualitySpecs: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivery_quality_specs";
            tableName: "contracts";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "contracts";
            dataType: "string";
            columnType: "PgText";
            data: "Cancelled" | "Draft" | "Active" | "PartiallyFulfilled" | "Fulfilled" | "Defaulted";
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: ["Draft", "Active", "PartiallyFulfilled", "Fulfilled", "Cancelled", "Defaulted"];
            baseColumn: never;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "contracts";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        updatedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "updated_at";
            tableName: "contracts";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        version: import("drizzle-orm/pg-core").PgColumn<{
            name: "version";
            tableName: "contracts";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const callOffs: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "call_offs";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        contractId: import("drizzle-orm/pg-core").PgColumn<{
            name: "contract_id";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        tenantId: import("drizzle-orm/pg-core").PgColumn<{
            name: "tenant_id";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        qty: import("drizzle-orm/pg-core").PgColumn<{
            name: "qty";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        windowFrom: import("drizzle-orm/pg-core").PgColumn<{
            name: "window_from";
            tableName: "call_offs";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        windowTo: import("drizzle-orm/pg-core").PgColumn<{
            name: "window_to";
            tableName: "call_offs";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        site: import("drizzle-orm/pg-core").PgColumn<{
            name: "site";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        silo: import("drizzle-orm/pg-core").PgColumn<{
            name: "silo";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        customerYard: import("drizzle-orm/pg-core").PgColumn<{
            name: "customer_yard";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgText";
            data: "Cancelled" | "Planned" | "Scheduled" | "Delivered" | "Invoiced";
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: ["Planned", "Scheduled", "Delivered", "Invoiced", "Cancelled"];
            baseColumn: never;
        }, {}, {}>;
        notes: import("drizzle-orm/pg-core").PgColumn<{
            name: "notes";
            tableName: "call_offs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "call_offs";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        updatedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "updated_at";
            tableName: "call_offs";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        version: import("drizzle-orm/pg-core").PgColumn<{
            name: "version";
            tableName: "call_offs";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const fulfilments: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "fulfilments";
    schema: undefined;
    columns: {
        contractId: import("drizzle-orm/pg-core").PgColumn<{
            name: "contract_id";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        tenantId: import("drizzle-orm/pg-core").PgColumn<{
            name: "tenant_id";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        deliveredQty: import("drizzle-orm/pg-core").PgColumn<{
            name: "delivered_qty";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        pricedQty: import("drizzle-orm/pg-core").PgColumn<{
            name: "priced_qty";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        invoicedQty: import("drizzle-orm/pg-core").PgColumn<{
            name: "invoiced_qty";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        openQty: import("drizzle-orm/pg-core").PgColumn<{
            name: "open_qty";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        avgPrice: import("drizzle-orm/pg-core").PgColumn<{
            name: "avg_price";
            tableName: "fulfilments";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        timeline: import("drizzle-orm/pg-core").PgColumn<{
            name: "timeline";
            tableName: "fulfilments";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        lastUpdated: import("drizzle-orm/pg-core").PgColumn<{
            name: "last_updated";
            tableName: "fulfilments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const amendments: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "amendments";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        contractId: import("drizzle-orm/pg-core").PgColumn<{
            name: "contract_id";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        tenantId: import("drizzle-orm/pg-core").PgColumn<{
            name: "tenant_id";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        type: import("drizzle-orm/pg-core").PgColumn<{
            name: "type";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgText";
            data: "QtyChange" | "WindowChange" | "PriceRuleChange" | "CounterpartyChange" | "DeliveryTermsChange" | "Other";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["QtyChange", "WindowChange", "PriceRuleChange", "CounterpartyChange", "DeliveryTermsChange", "Other"];
            baseColumn: never;
        }, {}, {}>;
        reason: import("drizzle-orm/pg-core").PgColumn<{
            name: "reason";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        changes: import("drizzle-orm/pg-core").PgColumn<{
            name: "changes";
            tableName: "amendments";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        approvedBy: import("drizzle-orm/pg-core").PgColumn<{
            name: "approved_by";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        approvedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "approved_at";
            tableName: "amendments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgText";
            data: "Pending" | "Approved" | "Rejected" | "Cancelled";
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: ["Pending", "Approved", "Rejected", "Cancelled"];
            baseColumn: never;
        }, {}, {}>;
        effectiveAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "effective_at";
            tableName: "amendments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        notes: import("drizzle-orm/pg-core").PgColumn<{
            name: "notes";
            tableName: "amendments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "amendments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        updatedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "updated_at";
            tableName: "amendments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        version: import("drizzle-orm/pg-core").PgColumn<{
            name: "version";
            tableName: "amendments";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const hedgeRefs: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "hedge_refs";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        contractId: import("drizzle-orm/pg-core").PgColumn<{
            name: "contract_id";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        tenantId: import("drizzle-orm/pg-core").PgColumn<{
            name: "tenant_id";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        instrument: import("drizzle-orm/pg-core").PgColumn<{
            name: "instrument";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgText";
            data: "FUTURES" | "OPTIONS";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["FUTURES", "OPTIONS"];
            baseColumn: never;
        }, {}, {}>;
        market: import("drizzle-orm/pg-core").PgColumn<{
            name: "market";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        symbol: import("drizzle-orm/pg-core").PgColumn<{
            name: "symbol";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        month: import("drizzle-orm/pg-core").PgColumn<{
            name: "month";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        qty: import("drizzle-orm/pg-core").PgColumn<{
            name: "qty";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
        side: import("drizzle-orm/pg-core").PgColumn<{
            name: "side";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgText";
            data: "BUY" | "SELL";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            enumValues: ["BUY", "SELL"];
            baseColumn: never;
        }, {}, {}>;
        linkId: import("drizzle-orm/pg-core").PgColumn<{
            name: "link_id";
            tableName: "hedge_refs";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "hedge_refs";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            enumValues: undefined;
            baseColumn: never;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export type Contract = typeof contracts.$inferSelect;
export type NewContract = typeof contracts.$inferInsert;
export type CallOff = typeof callOffs.$inferSelect;
export type NewCallOff = typeof callOffs.$inferInsert;
export type Fulfilment = typeof fulfilments.$inferSelect;
export type NewFulfilment = typeof fulfilments.$inferInsert;
export type Amendment = typeof amendments.$inferSelect;
export type NewAmendment = typeof amendments.$inferInsert;
export type HedgeRef = typeof hedgeRefs.$inferSelect;
export type NewHedgeRef = typeof hedgeRefs.$inferInsert;
//# sourceMappingURL=schema.d.ts.map
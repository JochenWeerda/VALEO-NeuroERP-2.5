/**
 * Quality Entities for VALEO NeuroERP 3.0 Production Domain
 * Quality management with sampling, testing, and non-conformity handling
 */
import { z } from 'zod';
export declare const SamplingPlanSchema: z.ZodObject<{
    id: z.ZodString;
    tenantId: z.ZodString;
    name: z.ZodString;
    for: z.ZodEnum<["mobile", "plant"]>;
    frequency: z.ZodEnum<["perBatch", "perN"]>;
    frequencyValue: z.ZodOptional<z.ZodNumber>;
    retainedSamples: z.ZodDefault<z.ZodBoolean>;
    targetAnalytes: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    for: "mobile" | "plant";
    frequency: "perBatch" | "perN";
    retainedSamples: boolean;
    targetAnalytes: string[];
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    frequencyValue?: number | undefined;
}, {
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    name: string;
    for: "mobile" | "plant";
    frequency: "perBatch" | "perN";
    targetAnalytes: string[];
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    frequencyValue?: number | undefined;
    retainedSamples?: boolean | undefined;
}>;
export declare const SamplingResultSchema: z.ZodObject<{
    id: z.ZodString;
    tenantId: z.ZodString;
    batchId: z.ZodString;
    sampleCode: z.ZodString;
    takenAt: z.ZodString;
    labId: z.ZodOptional<z.ZodString>;
    analyte: z.ZodString;
    value: z.ZodNumber;
    unit: z.ZodString;
    limitType: z.ZodEnum<["Action", "Reject"]>;
    decision: z.ZodEnum<["Pass", "Investigate", "Reject"]>;
    docUri: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    batchId: string;
    value: number;
    id: string;
    unit: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    sampleCode: string;
    takenAt: string;
    analyte: string;
    limitType: "Action" | "Reject";
    decision: "Reject" | "Pass" | "Investigate";
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    notes?: string | undefined;
    labId?: string | undefined;
    docUri?: string | undefined;
}, {
    batchId: string;
    value: number;
    id: string;
    unit: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    sampleCode: string;
    takenAt: string;
    analyte: string;
    limitType: "Action" | "Reject";
    decision: "Reject" | "Pass" | "Investigate";
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    notes?: string | undefined;
    labId?: string | undefined;
    docUri?: string | undefined;
}>;
export declare const RetainedSampleSchema: z.ZodObject<{
    id: z.ZodString;
    tenantId: z.ZodString;
    batchId: z.ZodString;
    sampleCode: z.ZodString;
    storageLoc: z.ZodString;
    expiryAt: z.ZodString;
    disposedAt: z.ZodOptional<z.ZodString>;
    notes: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    batchId: string;
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    sampleCode: string;
    storageLoc: string;
    expiryAt: string;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    notes?: string | undefined;
    disposedAt?: string | undefined;
}, {
    batchId: string;
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    sampleCode: string;
    storageLoc: string;
    expiryAt: string;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    notes?: string | undefined;
    disposedAt?: string | undefined;
}>;
export declare const NonConformitySchema: z.ZodObject<{
    id: z.ZodString;
    tenantId: z.ZodString;
    refType: z.ZodEnum<["batchId", "mixOrderId", "mobileRunId"]>;
    refId: z.ZodString;
    type: z.ZodEnum<["Contamination", "SpecOut", "Equipment", "Process"]>;
    severity: z.ZodEnum<["Low", "Medium", "High", "Critical"]>;
    description: z.ZodString;
    action: z.ZodEnum<["Block", "Rework", "Dispose"]>;
    capaId: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["Open", "InProgress", "Closed"]>>;
    discoveredAt: z.ZodString;
    closedAt: z.ZodOptional<z.ZodString>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "Contamination" | "SpecOut" | "Equipment" | "Process";
    status: "Open" | "InProgress" | "Closed";
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    refType: "batchId" | "mixOrderId" | "mobileRunId";
    refId: string;
    severity: "Low" | "Medium" | "High" | "Critical";
    description: string;
    action: "Block" | "Rework" | "Dispose";
    discoveredAt: string;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    capaId?: string | undefined;
    closedAt?: string | undefined;
}, {
    type: "Contamination" | "SpecOut" | "Equipment" | "Process";
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    refType: "batchId" | "mixOrderId" | "mobileRunId";
    refId: string;
    severity: "Low" | "Medium" | "High" | "Critical";
    description: string;
    action: "Block" | "Rework" | "Dispose";
    discoveredAt: string;
    status?: "Open" | "InProgress" | "Closed" | undefined;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    capaId?: string | undefined;
    closedAt?: string | undefined;
}>;
export declare const CAPASchema: z.ZodObject<{
    id: z.ZodString;
    tenantId: z.ZodString;
    ncId: z.ZodOptional<z.ZodString>;
    title: z.ZodString;
    description: z.ZodString;
    type: z.ZodEnum<["Correction", "CorrectiveAction", "PreventiveAction"]>;
    priority: z.ZodEnum<["Low", "Medium", "High", "Critical"]>;
    status: z.ZodDefault<z.ZodEnum<["Open", "InProgress", "Closed"]>>;
    assignedTo: z.ZodOptional<z.ZodString>;
    dueDate: z.ZodOptional<z.ZodString>;
    closedAt: z.ZodOptional<z.ZodString>;
    effectiveness: z.ZodOptional<z.ZodEnum<["Effective", "NotEffective", "NotEvaluated"]>>;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    createdBy: z.ZodOptional<z.ZodString>;
    updatedBy: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "Correction" | "CorrectiveAction" | "PreventiveAction";
    status: "Open" | "InProgress" | "Closed";
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    description: string;
    title: string;
    priority: "Low" | "Medium" | "High" | "Critical";
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    closedAt?: string | undefined;
    ncId?: string | undefined;
    assignedTo?: string | undefined;
    dueDate?: string | undefined;
    effectiveness?: "Effective" | "NotEffective" | "NotEvaluated" | undefined;
}, {
    type: "Correction" | "CorrectiveAction" | "PreventiveAction";
    id: string;
    tenantId: string;
    createdAt: string;
    updatedAt: string;
    description: string;
    title: string;
    priority: "Low" | "Medium" | "High" | "Critical";
    status?: "Open" | "InProgress" | "Closed" | undefined;
    createdBy?: string | undefined;
    updatedBy?: string | undefined;
    closedAt?: string | undefined;
    ncId?: string | undefined;
    assignedTo?: string | undefined;
    dueDate?: string | undefined;
    effectiveness?: "Effective" | "NotEffective" | "NotEvaluated" | undefined;
}>;
export type SamplingPlan = z.infer<typeof SamplingPlanSchema>;
export type SamplingResult = z.infer<typeof SamplingResultSchema>;
export type RetainedSample = z.infer<typeof RetainedSampleSchema>;
export type NonConformity = z.infer<typeof NonConformitySchema>;
export type CAPA = z.infer<typeof CAPASchema>;
export declare class SamplingPlanEntity {
    private data;
    constructor(data: SamplingPlan);
    get id(): string;
    get tenantId(): string;
    get name(): string;
    get for(): string;
    get frequency(): string;
    get frequencyValue(): number | undefined;
    get retainedSamples(): boolean;
    get targetAnalytes(): string[];
    get createdAt(): string;
    get updatedAt(): string;
    private validateBusinessRules;
    isForMobile(): boolean;
    isForPlant(): boolean;
    shouldSampleBatch(batchNumber: number): boolean;
    toJSON(): SamplingPlan;
    static create(data: Omit<SamplingPlan, 'id' | 'createdAt' | 'updatedAt'>): SamplingPlanEntity;
}
export declare class SamplingResultEntity {
    private data;
    constructor(data: SamplingResult);
    get id(): string;
    get tenantId(): string;
    get batchId(): string;
    get sampleCode(): string;
    get takenAt(): string;
    get labId(): string | undefined;
    get analyte(): string;
    get value(): number;
    get unit(): string;
    get limitType(): string;
    get decision(): string;
    get docUri(): string | undefined;
    get notes(): string | undefined;
    get createdAt(): string;
    get updatedAt(): string;
    private validateBusinessRules;
    isPass(): boolean;
    isReject(): boolean;
    requiresInvestigation(): boolean;
    isActionLimit(): boolean;
    isRejectLimit(): boolean;
    updateDecision(decision: SamplingResult['decision'], updatedBy?: string): SamplingResultEntity;
    toJSON(): SamplingResult;
    static create(data: Omit<SamplingResult, 'id' | 'createdAt' | 'updatedAt'>): SamplingResultEntity;
}
export declare class RetainedSampleEntity {
    private data;
    constructor(data: RetainedSample);
    get id(): string;
    get tenantId(): string;
    get batchId(): string;
    get sampleCode(): string;
    get storageLoc(): string;
    get expiryAt(): string;
    get disposedAt(): string | undefined;
    get notes(): string | undefined;
    get createdAt(): string;
    get updatedAt(): string;
    private validateBusinessRules;
    isExpired(): boolean;
    isDisposed(): boolean;
    dispose(disposedAt: string, notes?: string, updatedBy?: string): RetainedSampleEntity;
    toJSON(): RetainedSample;
    static create(data: Omit<RetainedSample, 'id' | 'createdAt' | 'updatedAt'>): RetainedSampleEntity;
}
export declare class NonConformityEntity {
    private data;
    constructor(data: NonConformity);
    get id(): string;
    get tenantId(): string;
    get refType(): string;
    get refId(): string;
    get type(): string;
    get severity(): string;
    get description(): string;
    get action(): string;
    get capaId(): string | undefined;
    get status(): string;
    get discoveredAt(): string;
    get closedAt(): string | undefined;
    get createdAt(): string;
    get updatedAt(): string;
    private validateBusinessRules;
    isOpen(): boolean;
    isInProgress(): boolean;
    isClosed(): boolean;
    isCritical(): boolean;
    requiresImmediateAction(): boolean;
    assignCAPA(capaId: string, updatedBy?: string): NonConformityEntity;
    close(closedAt: string, updatedBy?: string): NonConformityEntity;
    toJSON(): NonConformity;
    static create(data: Omit<NonConformity, 'id' | 'createdAt' | 'updatedAt'>): NonConformityEntity;
}
export declare class CAPAEntity {
    private data;
    constructor(data: CAPA);
    get id(): string;
    get tenantId(): string;
    get ncId(): string | undefined;
    get title(): string;
    get description(): string;
    get type(): string;
    get priority(): string;
    get status(): string;
    get assignedTo(): string | undefined;
    get dueDate(): string | undefined;
    get closedAt(): string | undefined;
    get effectiveness(): string | undefined;
    get createdAt(): string;
    get updatedAt(): string;
    private validateBusinessRules;
    isOpen(): boolean;
    isInProgress(): boolean;
    isClosed(): boolean;
    isOverdue(): boolean;
    isCritical(): boolean;
    isCorrective(): boolean;
    isPreventive(): boolean;
    assignTo(userId: string, updatedBy?: string): CAPAEntity;
    close(effectiveness: CAPA['effectiveness'], closedAt: string, updatedBy?: string): CAPAEntity;
    toJSON(): CAPA;
    static create(data: Omit<CAPA, 'id' | 'createdAt' | 'updatedAt'>): CAPAEntity;
}
//# sourceMappingURL=quality.d.ts.map